#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Gestor principal de la aplicaci√≥n Streamlit
"""

import streamlit as st
import sys
import time
import os
import hashlib
import logging
from pathlib import Path
from typing import List, Dict, Any, Optional

# Configurar logging para mostrar en terminal
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

# Configurar el path
current_dir = Path(__file__).parent.parent.parent.absolute()
sys.path.insert(0, str(current_dir))

from src.settings.settings import settings
from src.utils.movie_detector import MovieDetector
from src.utils.video import VideoPlayer, VideoFormatter, VideoComparison
from src.utils.ui_components import UIComponents, MovieInfoDisplay, SelectionManager, DuplicatePairsManager
from src.utils.file_operations import FileBatchProcessor
from src.services.plex_service import PlexService
from src.services.video_info_service import VideoInfoService
from src.services.plex_refresh_service import PlexRefreshService
from src.services.Plex.plex_title_extractor import PlexTitleExtractor
from src.services.Plex.plex_editions_manager import PlexEditionsManager
from src.services.scan_data_manager import ScanDataManager
from src.services.telegram_service import TelegramService
from src.services.Telegram.telegram_manager import TelegramManager
from src.services.Telegram.telegram_uploader import TelegramUploader
from src.services.Imdb.imdb_service import ImdbService


class StreamlitAppManager:
    """Gestor principal de la aplicaci√≥n Streamlit"""
    
    def __init__(self):
        self.video_player = VideoPlayer()
        self.video_formatter = VideoFormatter()
        self.video_comparison = VideoComparison()
        self.ui_components = UIComponents()
        self.movie_display = MovieInfoDisplay()
        self.selection_manager = SelectionManager()
        self.file_processor = FileBatchProcessor()
        self.plex_service = PlexService()
        self.video_info_service = VideoInfoService()
        self.plex_refresh_service = PlexRefreshService()
        self.plex_title_extractor = PlexTitleExtractor(settings.get_plex_database_path())
        self.plex_editions_manager = PlexEditionsManager(settings.get_plex_database_path())
        self.pairs_manager = DuplicatePairsManager()
        self.scan_data_manager = ScanDataManager()
        self.telegram_service = TelegramService()
        self.telegram_manager = TelegramManager()
        self.telegram_uploader = TelegramUploader()
        self.imdb_service = ImdbService()
        
        # Inicializar estado de sesi√≥n
        self._initialize_session_state()
    
    def _initialize_session_state(self):
        """Inicializa el estado de la sesi√≥n"""
        if 'peliculas' not in st.session_state:
            st.session_state.peliculas = []
        if 'duplicados' not in st.session_state:
            st.session_state.duplicados = []
        if 'detector' not in st.session_state:
            st.session_state.detector = None
        if 'scanning' not in st.session_state:
            st.session_state.scanning = False
        if 'par_actual' not in st.session_state:
            st.session_state.par_actual = 0
        if 'plex_cache' not in st.session_state:
            st.session_state.plex_cache = {}
    
    def render_header(self):
        """Renderiza el encabezado de la aplicaci√≥n"""
        st.title("üé¨ Utilidades de gesti√≥n de video con Plex y Telegram")
        st.markdown("---")
        
        # Botones principales
        col1, col2, col3 = st.columns(3)
        with col1:
            if st.button("üîç Escanear Carpeta", type="primary", use_container_width=True):
                st.session_state.show_scan_interface = True
                st.rerun()
        
        with col2:
            if st.button("üì± Telegram", use_container_width=True):
                st.session_state.show_telegram_interface = True
                st.rerun()
        
        with col3:
            if st.button("üé≠ IMDB", use_container_width=True):
                st.session_state.show_imdb_interface = True
                st.rerun()
        
        st.markdown("---")
        
        # Aclaraci√≥n importante
        st.info("‚ö†Ô∏è **IMPORTANTE:** Esta aplicaci√≥n NUNCA borra archivos. Solo detecta y muestra duplicados para que puedas decidir qu√© hacer con ellos.")
        st.markdown("---")
    
    def render_sidebar(self):
        """Renderiza el sidebar con configuraci√≥n"""
        with st.sidebar:
            st.header("‚öôÔ∏è Configuraci√≥n")
            
            # Pesta√±as en el sidebar
            tab1, tab2, tab3, tab4, tab5 = st.tabs(["üîç Detecci√≥n", "‚öôÔ∏è Configuraci√≥n", "üé¨ Plex", "üì± Telegram", "üé≠ IMDB"])
            
            with tab1:
                self._render_detection_tab()
            
            with tab2:
                self._render_configuration_tab()
            
            with tab3:
                self._render_plex_tab()
            
            with tab4:
                self._render_telegram_tab()
            
            with tab5:
                self._render_imdb_tab()
    
    def _render_detection_tab(self):
        """Renderiza la pesta√±a de detecci√≥n"""
        # Umbral de similitud
        umbral = st.slider(
            "Umbral de similitud",
            min_value=0.1,
            max_value=1.0,
            value=settings.get_similarity_threshold(),
            step=0.1,
            help="Umbral para considerar pel√≠culas como duplicadas"
        )
        
        st.write(f"Umbral configurado: {umbral}")
        st.markdown("---")
        
        # Directorios excluidos
        st.subheader("üö´ Directorios Excluidos")
        st.info("üí° Estos directorios se excluir√°n autom√°ticamente del escaneo")
        
        excluded_dirs = settings.get_excluded_directories()
        st.write("**Directorios actualmente excluidos:**")
        for dir_name in excluded_dirs:
            st.write(f"‚Ä¢ {dir_name}")
        
        # Permitir agregar/quitar directorios
        col1, col2 = st.columns(2)
        
        with col1:
            new_dir = st.text_input("Agregar directorio a excluir:", placeholder="ej: test")
            if st.button("‚ûï Agregar") and new_dir:
                settings.add_excluded_directory(new_dir)
                st.success(f"‚úÖ Directorio '{new_dir}' agregado a la exclusi√≥n")
                st.rerun()
        
        with col2:
            if excluded_dirs:
                dir_to_remove = st.selectbox("Remover directorio:", options=excluded_dirs, key="remove_dir")
                if st.button("‚ûñ Remover") and dir_to_remove:
                    settings.remove_excluded_directory(dir_to_remove)
                    st.success(f"‚úÖ Directorio '{dir_to_remove}' removido de la exclusi√≥n")
                    st.rerun()
        
        st.markdown("---")
        
        # Filtro por duraci√≥n
        st.subheader("üé¨ Filtro por Duraci√≥n")
        
        # Activar filtro por duraci√≥n
        filtro_duracion = st.checkbox(
            "üîç Filtrar por duraci√≥n",
            value=settings.get_duration_filter_enabled(),
            help="Descartar duplicados si la diferencia de duraci√≥n es muy grande"
        )
        
        # Tolerancia de duraci√≥n
        if filtro_duracion:
            tolerancia = st.slider(
                "Tolerancia de duraci√≥n (minutos)",
                min_value=1,
                max_value=30,
                value=settings.get_duration_tolerance_minutes(),
                step=1,
                help="Diferencia m√°xima en minutos permitida entre duplicados"
            )
            
            st.write(f"Tolerancia: {tolerancia} minutos")
            
            if st.button("üíæ Guardar filtro duraci√≥n", key="save_duration_filter"):
                settings.set_duration_filter_enabled(filtro_duracion)
                settings.set_duration_tolerance_minutes(tolerancia)
                st.success("‚úÖ Filtro de duraci√≥n guardado")
    
    def _render_configuration_tab(self):
        """Renderiza la pesta√±a de configuraci√≥n"""
        st.subheader("üé¨ Reproductores de Video")
        
        # Mostrar reproductores de video
        show_players = st.checkbox(
            "üé¨ Mostrar Reproductores de Video",
            value=settings.get_show_video_players(),
            help="Mostrar reproductores embebidos para comparar duplicados"
        )
        
        # Reproductores embebidos
        show_embedded = st.checkbox(
            "üì∫ Mostrar Reproductores Embebidos",
            value=settings.get_show_embedded_players(),
            help="Mostrar reproductores embebidos de Streamlit (m√°s lento pero integrado)"
        )
        
        # Tama√±o de reproductores
        player_size = st.selectbox(
            "üìè Tama√±o de Reproductores",
            options=["small", "medium", "large"],
            index=["small", "medium", "large"].index(settings.get_video_player_size()),
            help="Tama√±o de los reproductores de video"
        )
        
        # Tiempo de inicio para reproductores embebidos
        start_time_minutes = st.slider(
            "‚è±Ô∏è Minuto de inicio para comparaci√≥n",
            min_value=1,
            max_value=60,
            value=settings.get_video_start_time_seconds() // 60,
            step=1,
            help="Minuto desde el cual empezar a reproducir para comparar duplicados"
        )
        
        if st.button("üíæ Guardar configuraci√≥n reproductores", key="save_players_config"):
            settings.set_show_video_players(show_players)
            settings.set_show_embedded_players(show_embedded)
            settings.set_video_player_size(player_size)
            settings.set_video_start_time_seconds(start_time_minutes * 60)
            st.success("‚úÖ Configuraci√≥n de reproductores guardada")
        
        st.markdown("---")
        
        # Configuraci√≥n de Debug
        st.subheader("üêõ Modo Debug")
        
        # Modo debug
        debug_enabled = st.checkbox(
            "üêõ Activar Modo Debug",
            value=settings.get_debug_enabled(),
            help="En modo debug, los archivos se mueven a una carpeta en lugar de borrarse"
        )
        
        # Carpeta de debug
        debug_folder = st.text_input(
            "üìÅ Carpeta de Debug",
            value=settings.get_debug_folder(),
            help="Carpeta donde se mover√°n los archivos en modo debug"
        )
        
        if st.button("üíæ Guardar configuraci√≥n debug", key="save_debug_config"):
            settings.set_debug_enabled(debug_enabled)
            settings.set_debug_folder(debug_folder)
            st.success("‚úÖ Configuraci√≥n de debug guardada")
    
    def _render_plex_tab(self):
        """Renderiza la pesta√±a de configuraci√≥n de Plex"""
        st.subheader("üé¨ Configuraci√≥n de Plex")
        
        # Estado de conexi√≥n
        plex_configured = self.plex_service.is_configured()
        if plex_configured:
            st.success("‚úÖ Plex configurado")
        else:
            st.error("‚ùå Plex no configurado")
        
        # Ruta de base de datos
        db_path = st.text_input(
            "üìÅ Ruta de Base de Datos",
            value=settings.get_plex_database_path(),
            help="Ruta completa al archivo com.plexapp.plugins.library.db"
        )
        
        # Bibliotecas
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("üé¨ Biblioteca de Pel√≠culas")
            if st.button("üîÑ Cargar Bibliotecas", key="load_libraries"):
                st.rerun()
            
            # Obtener bibliotecas disponibles
            libraries = self.plex_service.get_available_libraries()
            if libraries:
                library_names = [lib['name'] for lib in libraries]
                current_movies_lib = settings.get_plex_movies_library()
                
                try:
                    default_index = library_names.index(current_movies_lib)
                except ValueError:
                    default_index = 0
                
                movies_lib = st.selectbox(
                    "Seleccionar biblioteca de pel√≠culas:",
                    options=library_names,
                    index=default_index,
                    key="movies_library_select",
                    help="Biblioteca de pel√≠culas en Plex"
                )
            else:
                movies_lib = st.text_input(
                    "Biblioteca de Pel√≠culas",
                    value=settings.get_plex_movies_library(),
                    help="Nombre de la biblioteca de pel√≠culas en Plex"
                )
        
        with col2:
            st.write("üì∫ Biblioteca de Series")
            if libraries:
                current_tv_lib = settings.get_plex_tv_shows_library()
                
                try:
                    default_index = library_names.index(current_tv_lib)
                except ValueError:
                    default_index = 0
                
                tv_lib = st.selectbox(
                    "Seleccionar biblioteca de series:",
                    options=library_names,
                    index=default_index,
                    key="tv_library_select",
                    help="Biblioteca de series en Plex"
                )
            else:
                tv_lib = st.text_input(
                    "Biblioteca de Series",
                    value=settings.get_plex_tv_shows_library(),
                    help="Nombre de la biblioteca de series en Plex"
                )
        
        # Opciones de metadatos
        st.subheader("üìä Metadatos")
        
        fetch_metadata = st.checkbox(
            "üîç Traer metadatos de Plex",
            value=settings.get_plex_fetch_metadata(),
            help="Obtener metadatos de Plex para mostrar informaci√≥n adicional"
        )
        
        duration_filter = st.checkbox(
            "‚è±Ô∏è Filtro por duraci√≥n",
            value=settings.get_plex_duration_filter_enabled(),
            help="Usar duraci√≥n de Plex para filtrar duplicados"
        )
        
        if duration_filter:
            tolerance = st.slider(
                "Tolerancia de duraci√≥n (minutos)",
                min_value=1,
                max_value=30,
                value=settings.get_plex_duration_tolerance_minutes(),
                step=1,
                help="Diferencia m√°xima en minutos permitida entre duplicados"
            )
        else:
            tolerance = settings.get_plex_duration_tolerance_minutes()
        
        # Botones de prueba y guardado
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üß™ Probar Conexi√≥n", key="test_plex"):
                if self.plex_service.test_connection():
                    st.success("‚úÖ Conexi√≥n exitosa")
                else:
                    st.error("‚ùå Error de conexi√≥n")
        
        # Secci√≥n de refresh de Plex
        st.subheader("üîÑ Refrescar Bibliotecas")
        
        col_refresh1, col_refresh2 = st.columns(2)
        
        with col_refresh1:
            if st.button("üîÑ Refrescar Pel√≠culas", key="refresh_movies"):
                with st.spinner("Refrescando biblioteca de pel√≠culas..."):
                    if self.plex_refresh_service.refresh_movies_library():
                        st.success("‚úÖ Biblioteca de pel√≠culas refrescada")
                    else:
                        st.error("‚ùå Error refrescando pel√≠culas")
        
        with col_refresh2:
            if st.button("üîÑ Refrescar Series", key="refresh_tv"):
                with st.spinner("Refrescando biblioteca de series..."):
                    if self.plex_refresh_service.refresh_tv_shows_library():
                        st.success("‚úÖ Biblioteca de series refrescada")
                    else:
                        st.error("‚ùå Error refrescando series")
        
        # Refresh via API
        if st.button("üöÄ Refrescar Todas las Bibliotecas (API)", key="refresh_all_api"):
            with st.spinner("Refrescando todas las bibliotecas via API..."):
                if self.plex_refresh_service.refresh_all_libraries_via_api():
                    st.success("‚úÖ Todas las bibliotecas refrescadas via API")
                else:
                    st.error("‚ùå Error refrescando bibliotecas via API")
        
        # Informaci√≥n del servidor
        if st.button("‚ÑπÔ∏è Info del Servidor Plex", key="plex_server_info"):
            server_info = self.plex_refresh_service.get_plex_server_info()
            if "error" in server_info:
                st.error(f"‚ùå {server_info['error']}")
            else:
                st.success("‚úÖ Servidor Plex conectado")
                st.json(server_info)
        
        with col2:
            if st.button("üíæ Guardar Configuraci√≥n", key="save_plex_config"):
                settings.set_plex_database_path(db_path)
                settings.set_plex_movies_library(movies_lib)
                settings.set_plex_tv_shows_library(tv_lib)
                settings.set_plex_fetch_metadata(fetch_metadata)
                settings.set_plex_duration_filter_enabled(duration_filter)
                settings.set_plex_duration_tolerance_minutes(tolerance)
                st.success("‚úÖ Configuraci√≥n de Plex guardada")
                st.rerun()
    
    def render_scan_section(self):
        """Renderiza la secci√≥n de escaneo"""
        st.header("üìÅ Escanear Carpeta")
        
        # Input de carpeta
        try:
            last_path = settings.get_last_scan_path()
        except AttributeError:
            last_path = settings.get("paths.last_scan_path", "")
        
        carpeta = st.text_input(
            "Ruta de la carpeta a analizar",
            value=last_path,
            help="Seleccione la carpeta que contiene las pel√≠culas"
        )
        
        # Mostrar √∫ltima ruta usada si existe
        if last_path:
            st.caption(f"üìÅ √öltima ruta escaneada: {last_path}")
        
        col1, col2 = st.columns([1, 1])
        
        with col1:
            scan_button = st.button("üîç Escanear", type="primary", disabled=st.session_state.scanning)
        
        with col2:
            if st.button("üîÑ Limpiar"):
                st.session_state.peliculas = []
                st.session_state.duplicados = []
                st.session_state.detector = None
                st.rerun()
        
        # Secci√≥n de gesti√≥n de datos de escaneo
        st.markdown("---")
        st.subheader("üíæ Gesti√≥n de Datos de Escaneo")
        
        col_save, col_load = st.columns(2)
        
        with col_save:
            if st.button("üíæ Guardar Escaneo", disabled=not hasattr(st.session_state, 'detector') or not st.session_state.detector):
                self._save_scan_data()
        
        with col_load:
            if st.button("üìÇ Cargar Escaneo"):
                # Activar modo de carga
                st.session_state.show_load_interface = True
                st.rerun()
        
        # Mostrar interfaz de carga si est√° activada
        if getattr(st.session_state, 'show_load_interface', False):
            st.markdown("---")
            self._show_load_scan_interface()
        
        # Procesar escaneo
        if scan_button and carpeta:
            st.write("üîç Bot√≥n presionado, iniciando escaneo...")
            self._process_scan(carpeta)
        elif scan_button and not carpeta:
            st.error("‚ùå Por favor, especifica una carpeta para escanear")
    
    def _process_scan(self, carpeta: str):
        """Procesa el escaneo de la carpeta"""
        if not Path(carpeta).exists():
            st.error("‚ùå La carpeta especificada no existe")
            return
        
        st.session_state.scanning = True
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        # Resetear contadores de pares
        settings.reset_pairs_counters()
        
        try:
            status_text.text("üîç Iniciando escaneo...")
            progress_bar.progress(10)
            
            st.info(f"üìÅ Escaneando carpeta: {carpeta}")
            
            detector = MovieDetector(carpeta)
            st.session_state.detector = detector
            
            status_text.text("üìÅ Escaneando archivos...")
            progress_bar.progress(30)
            
            # Crear miniterminal para mostrar archivos
            st.write("**üîç Miniterminal - Archivos encontrados:**")
            terminal_placeholder = st.empty()
            terminal_content = []
            
            def mostrar_archivo(archivo):
                nombre_archivo = Path(archivo).name
                terminal_content.append(f"üé¨ {nombre_archivo}")
                terminal_placeholder.code("\n".join(terminal_content[-15:]), language="text")
            
            detector.mostrar_archivo = mostrar_archivo
            
            st.write("üîç Iniciando escaneo de archivos...")
            peliculas = detector.escanear_carpeta()
            st.write(f"‚úÖ Escaneo completado. Encontradas {len(peliculas)} pel√≠culas")
            st.session_state.peliculas = peliculas
            
            progress_bar.progress(60)
            status_text.text("üîç Buscando duplicados...")
            
            duplicados = detector.encontrar_duplicados()
            st.session_state.duplicados = duplicados
            
            progress_bar.progress(100)
            status_text.text("‚úÖ Escaneo completado")
            
            st.success(f"‚úÖ Encontradas {len(peliculas)} pel√≠culas")
            st.success(f"üîç Encontrados {len(duplicados)} grupos de duplicados")
            
            # Guardar ruta de escaneo
            try:
                settings.set_last_scan_path(carpeta)
            except AttributeError:
                # Si el m√©todo no existe, usar el m√©todo gen√©rico
                settings.set("paths.last_scan_path", carpeta)
            
        except Exception as e:
            st.error(f"‚ùå Error durante el escaneo: {e}")
        finally:
            st.session_state.scanning = False
    
    def render_results(self):
        """Renderiza los resultados del escaneo"""
        # Debug: verificar estado de la sesi√≥n
        duplicados_count = len(st.session_state.duplicados) if st.session_state.duplicados else 0
        peliculas_count = len(st.session_state.peliculas) if st.session_state.peliculas else 0
        
        logging.info(f"üîç render_results - duplicados: {duplicados_count}")
        logging.info(f"üîç render_results - peliculas: {peliculas_count}")
        
        # Mostrar informaci√≥n de debug en la interfaz
        with st.expander("üîç Debug - Estado de la sesi√≥n", expanded=False):
            st.write(f"**Duplicados en session_state:** {duplicados_count}")
            st.write(f"**Pel√≠culas en session_state:** {peliculas_count}")
            st.write(f"**Tipo de duplicados:** {type(st.session_state.duplicados)}")
            st.write(f"**Scan cargado:** {getattr(st.session_state, 'scan_loaded', False)}")
            if st.session_state.duplicados and len(st.session_state.duplicados) > 0:
                st.write(f"**Primer elemento:** {type(st.session_state.duplicados[0])}")
        
        # Verificar si hay duplicados
        if not st.session_state.duplicados or len(st.session_state.duplicados) == 0:
            logging.info("‚ö†Ô∏è render_results - No hay duplicados, saliendo")
            # Mostrar mensaje de debug en la interfaz
            if getattr(st.session_state, 'scan_loaded', False):
                st.warning("‚ö†Ô∏è Se carg√≥ un escaneo pero no se encontraron duplicados. Esto puede indicar un problema con el formato de datos.")
                # Intentar recargar los datos
                st.info("üîÑ Intentando recargar los datos...")
                st.rerun()
            else:
                st.info("üí° No hay datos de duplicados para mostrar. Escanea una carpeta o carga un escaneo guardado.")
            return
        
        # Verificar que los datos est√°n en el formato correcto
        if isinstance(st.session_state.duplicados, list) and len(st.session_state.duplicados) > 0:
            # Verificar que el primer elemento es un diccionario (formato correcto)
            first_item = st.session_state.duplicados[0]
            if not isinstance(first_item, dict):
                logging.warning("‚ö†Ô∏è Formato de datos incorrecto, intentando convertir...")
                # Aqu√≠ podr√≠as agregar l√≥gica de conversi√≥n si es necesario
        
        # M√©tricas
        total_peliculas = len(st.session_state.peliculas) if st.session_state.peliculas else 0
        total_duplicados = len(st.session_state.duplicados)
        
        # Si no hay pel√≠culas pero s√≠ duplicados, es un escaneo cargado
        if total_peliculas == 0 and total_duplicados > 0:
            # Estimar pel√≠culas bas√°ndose en los duplicados
            total_peliculas = total_duplicados * 2  # Aproximaci√≥n
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("üìÅ Total Pel√≠culas", total_peliculas)
        with col2:
            st.metric("üîç Duplicados Encontrados", total_duplicados)
        with col3:
            if total_duplicados > 0:
                # Calcular espacio ahorrable manejando ambos formatos
                espacio_ahorrado = 0
                for duplicado in st.session_state.duplicados:
                    size1, size2 = 0, 0
                    
                    # Verificar si es una lista (formato antiguo) o diccionario (formato nuevo)
                    if isinstance(duplicado, list) and len(duplicado) >= 2:
                        # Formato antiguo: [archivo1, archivo2]
                        archivo1, archivo2 = duplicado[0], duplicado[1]
                        size1 = archivo1.get('tama√±o', 0) / (1024**3) if isinstance(archivo1, dict) else 0
                        size2 = archivo2.get('tama√±o', 0) / (1024**3) if isinstance(archivo2, dict) else 0
                    elif isinstance(duplicado, dict):
                        # Formato nuevo: {'Tama√±o 1': '1.5 GB', 'Tama√±o 2': '1.4 GB', ...}
                        size1_str = duplicado.get('Tama√±o 1', '0 GB')
                        size2_str = duplicado.get('Tama√±o 2', '0 GB')
                        
                        # Convertir a GB
                        if isinstance(size1_str, str) and 'GB' in size1_str:
                            size1 = float(size1_str.replace(' GB', ''))
                        elif isinstance(size1_str, str) and 'MB' in size1_str:
                            size1 = float(size1_str.replace(' MB', '')) / 1024
                        else:
                            size1 = 0
                            
                        if isinstance(size2_str, str) and 'GB' in size2_str:
                            size2 = float(size2_str.replace(' GB', ''))
                        elif isinstance(size2_str, str) and 'MB' in size2_str:
                            size2 = float(size2_str.replace(' MB', '')) / 1024
                        else:
                            size2 = 0
                    
                    # Sumar el menor de los dos tama√±os
                    espacio_ahorrado += min(size1, size2)
                
                st.metric("üíæ Espacio Ahorrable (GB)", f"{espacio_ahorrado:.1f} GB")
        
        st.markdown("---")
        
        # Mostrar duplicados
        if st.session_state.duplicados:
            self._render_duplicates()
    
    def _render_duplicates(self):
        """Renderiza la lista de duplicados usando el nuevo gestor de pares"""
        # Crear datos para el DataFrame
        df_data = self._create_dataframe_data()
        
        if not df_data:
            st.warning("‚ö†Ô∏è No hay datos de duplicados para mostrar")
            return
        
        # Establecer la lista de pares en el gestor
        self.pairs_manager.set_pairs_list(df_data)
        
        # Mostrar interfaz principal del gestor de pares
        self.pairs_manager.render_main_interface()
        
        # Integrar con an√°lisis de Plex existente
        current_pair = self.pairs_manager.navigation.get_current_pair()
        if current_pair:
            current_index = self.pairs_manager.navigation.get_current_index()
            self._render_current_pair_with_plex(current_pair, current_index)
    
    def _render_current_pair_with_plex(self, pair_data: Dict[str, Any], index: int):
        """Renderiza el par actual con an√°lisis de Plex integrado"""
        # Mostrar informaci√≥n b√°sica inmediatamente
        self._render_basic_info_immediate(pair_data, index)
        
        # An√°lisis de Plex si est√° habilitado
        if settings.get_plex_fetch_metadata() and self.plex_service.is_configured():
            # Cargar metadatos autom√°ticamente si est√° habilitado
            self._render_plex_metadata_auto(pair_data, index)
        else:
            # Mostrar expander opcional si no est√° habilitado
            with st.expander("üé¨ Metadatos de Plex (deshabilitado)", expanded=False):
                st.info("üí° Habilita 'Traer metadatos de Plex' en la configuraci√≥n para ver metadatos autom√°ticamente")
        
        # SIEMPRE mostrar reproductores (m√°s consistente)
        self._render_video_comparison(pair_data, index)
        
        # Informaci√≥n y controles
        self._render_movie_controls(pair_data, index)
    
    def _parse_size_to_bytes(self, size_str: str) -> int:
        """Convierte una cadena de tama√±o a bytes"""
        if not size_str or not isinstance(size_str, str):
            return 0
        
        try:
            if 'GB' in size_str:
                return int(float(size_str.replace(' GB', '')) * (1024**3))
            elif 'MB' in size_str:
                return int(float(size_str.replace(' MB', '')) * (1024**2))
            elif 'KB' in size_str:
                return int(float(size_str.replace(' KB', '')) * 1024)
            else:
                return 0
        except (ValueError, TypeError):
            return 0
    
    def _create_dataframe_data(self) -> List[Dict[str, Any]]:
        """Crea los datos para el DataFrame"""
        df_data = []
        
        for i, duplicado in enumerate(st.session_state.duplicados):
            # Verificar si es una lista o un diccionario
            if isinstance(duplicado, list) and len(duplicado) >= 2:
                archivo1, archivo2 = duplicado[0], duplicado[1]
            elif isinstance(duplicado, dict):
                # Si ya es un diccionario, usar directamente
                # Los datos vienen en formato: {'Peli 1': ..., 'Ruta 1': ..., 'Tama√±o 1': ..., etc.}
                archivo1 = {
                    'archivo': duplicado.get('Ruta 1', ''),
                    'nombre': duplicado.get('Peli 1', 'N/A'),
                    'tama√±o': self._parse_size_to_bytes(duplicado.get('Tama√±o 1', '0 GB'))
                }
                archivo2 = {
                    'archivo': duplicado.get('Ruta 2', ''),
                    'nombre': duplicado.get('Peli 2', 'N/A'),
                    'tama√±o': self._parse_size_to_bytes(duplicado.get('Tama√±o 2', '0 GB'))
                }
            else:
                continue
            
            # Extraer informaci√≥n del archivo 1
            if archivo1 and isinstance(archivo1, dict):
                ruta1 = archivo1.get('archivo', '')
                nombre1 = archivo1.get('nombre', 'N/A')
                tama√±o1 = archivo1.get('tama√±o', 0) / (1024**3)
                duracion1 = archivo1.get('duracion', 0)
            else:
                nombre1 = str(archivo1) if archivo1 else "N/A"
                tama√±o1 = 0
                ruta1 = "N/A"
                duracion1 = 0
            
            # Extraer informaci√≥n del archivo 2
            if archivo2 and isinstance(archivo2, dict):
                ruta2 = archivo2.get('archivo', '')
                nombre2 = archivo2.get('nombre', 'N/A')
                tama√±o2 = archivo2.get('tama√±o', 0) / (1024**3)
                duracion2 = archivo2.get('duracion', 0)
            else:
                nombre2 = str(archivo2) if archivo2 else "N/A"
                tama√±o2 = 0
                ruta2 = "N/A"
                duracion2 = 0
            
            # Formatear duraci√≥n
            def format_duration(seconds):
                if seconds == 0:
                    return "N/A"
                hours = int(seconds // 3600)
                minutes = int((seconds % 3600) // 60)
                seconds = int(seconds % 60)
                return f"{hours}h {minutes}m {seconds}s"
            
            # Agregar fila al DataFrame
            df_data.append({
                'Peli 1': nombre1,
                'Tama√±o 1 (GB)': f"{tama√±o1:.2f}",
                'Duraci√≥n 1': format_duration(duracion1),
                'Ruta 1': ruta1,
                'Peli 2': nombre2,
                'Tama√±o 2 (GB)': f"{tama√±o2:.2f}",
                'Duraci√≥n 2': format_duration(duracion2),
                'Ruta 2': ruta2
            })
        
        return df_data
    
    def _render_bulk_operations(self, df_data: List[Dict[str, Any]]):
        """Renderiza operaciones en lote"""
        # Contar selecciones
        seleccionadas = sum(1 for v in st.session_state.selecciones.values() if v)
        
        if seleccionadas > 0:
            st.subheader("üìÅ Mover Archivos Seleccionados")
            
            col1, col2 = st.columns([2, 1])
            
            with col1:
                carpeta_destino = st.text_input(
                    "Carpeta de destino",
                    value=self.settings.get_selected_movies_folder(),
                    help="Ruta donde se mover√°n los archivos seleccionados"
                )
            
            with col2:
                st.write("")  # Espaciado
                if st.button("üìÅ Mover Archivos Seleccionados", type="primary"):
                    self._process_bulk_move(df_data, carpeta_destino)
            
            st.markdown("---")
    
    def _process_bulk_move(self, df_data: List[Dict[str, Any]], destination: str):
        """Procesa el movimiento en lote"""
        selections = self.selection_manager.get_selected_movies(len(df_data))
        result = self.file_processor.process_selected_movies(
            selections, df_data, 'move', destination
        )
        
        if result["success"]:
            if result["moved"] > 0:
                st.success(f"‚úÖ {result['moved']} archivos movidos exitosamente a: {destination}")
            if result["errors"] > 0:
                st.error(f"‚ùå {result['errors']} archivos no pudieron ser movidos")
            if result["not_found"] > 0:
                st.warning(f"‚ö†Ô∏è {result['not_found']} archivos no encontrados")
        else:
            st.error(f"‚ùå {result['message']}")
        
        # Limpiar selecciones despu√©s de mover
        self.selection_manager.clear_selections()
        st.rerun()
    
    def _render_current_pair(self, df_data: List[Dict[str, Any]], index: int):
        """Renderiza el par actual de duplicados"""
        if index >= len(df_data):
            st.warning("No hay m√°s pares para mostrar")
            return
            
        row = df_data[index]
        
        
        # L√≠nea separadora si no es el primer par
        if index > 0:
            self.ui_components.render_separator_line()
        
        st.markdown(f"**Par {index+1}:**")
        
        # 1. MOSTRAR INFORMACI√ìN B√ÅSICA INMEDIATAMENTE
        self._render_basic_info_immediate(row, index)
        
        # 2. Plex metadata - cargar autom√°ticamente si est√° habilitado
        if settings.get_plex_fetch_metadata() and self.plex_service.is_configured():
            # Cargar metadatos autom√°ticamente si est√° habilitado
            self._render_plex_metadata_auto(row, index)
        else:
            # Mostrar expander opcional si no est√° habilitado
            with st.expander("üé¨ Metadatos de Plex (deshabilitado)", expanded=False):
                st.info("üí° Habilita 'Traer metadatos de Plex' en la configuraci√≥n para ver metadatos autom√°ticamente")
        
        # 3. SIEMPRE mostrar reproductores (m√°s consistente)
        self._render_video_comparison(row, index)
        
        # 4. Informaci√≥n y controles
        self._render_movie_controls(row, index)
    
    def _render_video_comparison(self, row: Dict[str, Any], index: int):
        """Renderiza la comparaci√≥n de videos mejorada"""
        st.subheader("üé¨ Comparar Videos")
        
        # Verificar si se deben mostrar reproductores embebidos
        try:
            show_embedded = settings.get_show_embedded_players()
        except AttributeError:
            show_embedded = False
        
        # Crear columnas
        col1, col2 = st.columns(2)
        
        # Pel√≠cula 1
        with col1:
            self._render_single_video(row, 1, index, col1, show_embedded)
        
        # Pel√≠cula 2
        with col2:
            self._render_single_video(row, 2, index, col2, show_embedded)
    
    def _render_single_video(self, row: Dict[str, Any], video_num: int, index: int, col, show_embedded: bool = False):
        """Renderiza un solo video con mejor manejo de errores"""
        with col:
            st.write(f"**Pel√≠cula {video_num}:**")
            st.write(f"üìÅ {row.get(f'Peli {video_num}', 'N/A')}")
            st.write(f"Tama√±o: {row.get(f'Tama√±o {video_num} (GB)', 'N/A')} GB")
            st.write(f"Duraci√≥n: {row.get(f'Duraci√≥n {video_num}', 'N/A')}")
            
            # Obtener ruta del archivo
            ruta = row.get(f'Ruta {video_num}', '')
            
            if not ruta or not os.path.exists(ruta):
                st.error("‚ùå Archivo no encontrado")
                return
            
            # Mostrar informaci√≥n de carpeta
            self._render_folder_comparison(row, video_num)
            
            # Informaci√≥n del archivo
            try:
                file_size_gb = os.path.getsize(ruta) / (1024**3)
                file_ext = os.path.splitext(ruta)[1].lower()
                
                # Mostrar informaci√≥n del archivo
                st.write(f"üìä Tama√±o: {file_size_gb:.2f} GB")
                st.write(f"üìÑ Extensi√≥n: {file_ext}")
                
                # SIEMPRE mostrar bot√≥n de reproductor externo
                self._render_external_player_button(ruta, f"open{video_num}_{index}")
                
                # Mostrar reproductores embebidos si est√°n habilitados
                if show_embedded:
                    self._render_embedded_video(ruta, file_size_gb, file_ext, f"video{video_num}_{index}")
                else:
                    st.info("üí° Reproductores embebidos deshabilitados en configuraci√≥n")
                
            except Exception as e:
                st.error(f"‚ùå Error procesando archivo: {e}")
                # A√∫n as√≠ mostrar bot√≥n de reproductor externo
                self._render_external_player_button(ruta, f"open{video_num}_{index}")
    
    def _render_folder_comparison(self, row: Dict[str, Any], video_num: int):
        """Renderiza la comparaci√≥n de carpetas entre los dos archivos"""
        try:
            # Obtener rutas de ambos archivos
            ruta1 = row.get('Ruta 1', '')
            ruta2 = row.get('Ruta 2', '')
            
            if not ruta1 or not ruta2:
                return
            
            # Extraer carpetas de las rutas
            from pathlib import Path
            carpeta1 = Path(ruta1).parent.name
            carpeta2 = Path(ruta2).parent.name
            
            # Mostrar informaci√≥n de carpeta
            if video_num == 1:
                st.write(f"üìÅ Carpeta: `{carpeta1}`")
            else:
                st.write(f"üìÅ Carpeta: `{carpeta2}`")
            
            # Comparar carpetas (solo mostrar una vez, en el primer video)
            if video_num == 1:
                if carpeta1 != carpeta2:
                    st.warning("‚ö†Ô∏è **Carpetas diferentes**")
                    st.info(f"üìÇ Izquierda: `{carpeta1}` | Derecha: `{carpeta2}`")
                else:
                    st.info("üëÅÔ∏è **Ojo que est√°n en la misma carpeta**")
                    st.info(f"üìÇ Ambas en: `{carpeta1}`")
                    
        except Exception as e:
            logging.error(f"Error en comparaci√≥n de carpetas: {e}")
    
    def _render_embedded_video(self, file_path: str, file_size_gb: float, file_ext: str, key: str):
        """Renderiza un video embebido con mejor manejo de errores"""
        try:
            # Obtener tiempo de inicio desde configuraci√≥n
            start_time = settings.get_video_start_time_seconds()
            
            # Verificar tama√±o del archivo (l√≠mite m√°s permisivo)
            max_size_gb = 2.0  # Volver a 2GB como l√≠mite original
            if file_size_gb > max_size_gb:
                st.warning(f"üìÅ Archivo muy grande ({file_size_gb:.1f}GB) para reproductor embebido")
                st.info("üí° Usa el bot√≥n 'Abrir en Reproductor' para archivos grandes")
                return
            
            # Verificar formato compatible
            supported_formats = ['.mp4', '.webm', '.ogg', '.avi', '.mov']
            if file_ext not in supported_formats:
                st.warning(f"‚ùå Formato no compatible: {file_ext}")
                st.info(f"üìÅ Formatos soportados: {', '.join(supported_formats)}")
                return
            
            # Intentar cargar el video
            try:
                # M√©todo mejorado: usar ruta directa en lugar de bytes para archivos grandes
                if file_size_gb <= 0.5:  # Archivos peque√±os: usar bytes
                    with open(file_path, "rb") as video_file:
                        video_bytes = video_file.read()
                    st.video(video_bytes, start_time=start_time, width=300)
                else:  # Archivos medianos: usar ruta directa
                    st.video(file_path, start_time=start_time, width=300)
                
                # Mostrar informaci√≥n del tiempo de inicio
                minutes = start_time // 60
                seconds = start_time % 60
                st.caption(f"‚è±Ô∏è Inicia en {minutes}:{seconds:02d}")
                
            except Exception as video_error:
                st.error(f"‚ùå Error cargando video: {str(video_error)}")
                st.info("üí° Posibles causas:")
                st.info("‚Ä¢ Codec no compatible con el navegador")
                st.info("‚Ä¢ Archivo corrupto o incompleto")
                st.info("‚Ä¢ Problema de permisos de archivo")
                
                # Sugerir alternativas
                st.info("üîß Soluciones:")
                st.info("‚Ä¢ Usa el bot√≥n 'Abrir en Reproductor' para reproducir externamente")
                st.info("‚Ä¢ Verifica que el archivo no est√© corrupto")
                st.info("‚Ä¢ Intenta con un archivo m√°s peque√±o para prueba")
                
        except Exception as e:
            st.error(f"‚ùå Error inesperado: {e}")
    
    def _render_external_player_button(self, file_path: str, key: str):
        """Renderiza bot√≥n para abrir en reproductor externo"""
        if st.button(f"üé¨ Abrir en Reproductor", key=key, help="Abre el video en tu reproductor predeterminado"):
            try:
                # Intentar abrir con el sistema operativo
                if os.name == 'nt':  # Windows
                    os.startfile(file_path)
                elif os.name == 'posix':  # macOS y Linux
                    os.system(f'open "{file_path}"' if sys.platform == 'darwin' else f'xdg-open "{file_path}"')
                else:
                    st.warning("‚ö†Ô∏è Sistema operativo no soportado para apertura autom√°tica")
                    st.info(f"üìÅ Ruta del archivo: {file_path}")
                
                st.success("‚úÖ Abriendo en reproductor externo...")
                
            except Exception as e:
                st.error(f"‚ùå No se pudo abrir autom√°ticamente: {e}")
                st.info(f"üìÅ Ruta del archivo: {file_path}")
                st.info("üí° Copia la ruta y √°brela manualmente en tu reproductor")
        
        st.markdown("---")
    
    def _render_movie_controls(self, row: Dict[str, Any], index: int):
        """Renderiza los controles de pel√≠culas"""
        st.subheader("üìã Informaci√≥n y Controles")
        
        col1, col2, col3 = st.columns([1, 1, 1])
        
        with col1:
            st.write("**Pel√≠cula 1:**")
            st.markdown(f"<h4 style='color: #1f77b4'>{row.get('Peli 1', 'N/A')}</h4>", unsafe_allow_html=True)
            st.write(f"Tama√±o: {row.get('Tama√±o 1 (GB)', 'N/A')} GB")
            st.write(f"Duraci√≥n: {row.get('Duraci√≥n 1', 'N/A')}")
            st.write(f"Ruta: {row.get('Ruta 1', 'N/A')}")
            
            # Checkbox para pel√≠cula 1
            select1_key = f"select1_{index}"
            if st.checkbox(f"Seleccionar Pel√≠cula 1", key=select1_key):
                st.session_state[f"selected_{index}_1"] = True
                st.session_state[f"selected_{index}_2"] = False  # Deseleccionar la otra
            else:
                st.session_state[f"selected_{index}_1"] = False
        
        with col2:
            st.write("**Pel√≠cula 2:**")
            st.markdown(f"<h4 style='color: #ff7f0e'>{row.get('Peli 2', 'N/A')}</h4>", unsafe_allow_html=True)
            st.write(f"Tama√±o: {row.get('Tama√±o 2 (GB)', 'N/A')} GB")
            st.write(f"Duraci√≥n: {row.get('Duraci√≥n 2', 'N/A')}")
            st.write(f"Ruta: {row.get('Ruta 2', 'N/A')}")
            
            # Checkbox para pel√≠cula 2
            select2_key = f"select2_{index}"
            if st.checkbox(f"Seleccionar Pel√≠cula 2", key=select2_key):
                st.session_state[f"selected_{index}_2"] = True
                st.session_state[f"selected_{index}_1"] = False  # Deseleccionar la otra
            else:
                st.session_state[f"selected_{index}_2"] = False
        
        with col3:
            st.write("**Acciones:**")
            
            # Verificar si alguna pel√≠cula del par est√° seleccionada
            par_seleccionado = (
                st.session_state.get(f"selected_{index}_1", False) or 
                st.session_state.get(f"selected_{index}_2", False)
            )
            
            if st.button("üóëÔ∏è Eliminar Seleccionadas", disabled=not par_seleccionado, key=f"delete_{index}"):
                self._process_pair_deletion(index, row)
        
        st.markdown("---")
    
    def _process_pair_deletion(self, index: int, row: Dict[str, Any]):
        """Procesa la eliminaci√≥n de un par"""
        try:
            # Agregar el index al row para que est√© disponible
            row['index'] = index
            
            # Verificar si est√° en modo debug
            debug_enabled = settings.get_debug_enabled()
            debug_folder = settings.get_debug_folder()
            
            if debug_enabled:
                # Modo debug: mover a carpeta de debug
                self._move_to_debug_folder(row, debug_folder)
            else:
                # Modo normal: eliminar archivos
                self._delete_selected_files(row)
                
        except Exception as e:
            st.error(f"‚ùå Error procesando eliminaci√≥n: {str(e)}")
    
    def _move_to_debug_folder(self, row: Dict[str, Any], debug_folder: str):
        """Mueve archivos seleccionados a la carpeta de debug"""
        import shutil
        from pathlib import Path
        
        # Crear carpeta de debug si no existe
        debug_path = Path(debug_folder)
        debug_path.mkdir(parents=True, exist_ok=True)
        
        moved_files = []
        
        # Verificar qu√© archivos est√°n seleccionados
        index = row.get('index', 0)
        pelicula1_selected = st.session_state.get(f"selected_{index}_1", False)
        pelicula2_selected = st.session_state.get(f"selected_{index}_2", False)
        
        # Debug: mostrar estado de selecci√≥n
        st.write(f"üîç Debug - Index: {index}")
        st.write(f"üîç Debug - Pel√≠cula 1 seleccionada: {pelicula1_selected}")
        st.write(f"üîç Debug - Pel√≠cula 2 seleccionada: {pelicula2_selected}")
        
        if pelicula1_selected:
            ruta1 = row.get('Ruta 1', '')
            if ruta1 and os.path.exists(ruta1):
                archivo_origen = Path(ruta1)
                archivo_destino = debug_path / archivo_origen.name
                
                # Si ya existe, agregar n√∫mero
                contador = 1
                while archivo_destino.exists():
                    nombre_base = archivo_origen.stem
                    extension = archivo_origen.suffix
                    archivo_destino = debug_path / f"{nombre_base}_{contador}{extension}"
                    contador += 1
                
                shutil.move(str(archivo_origen), str(archivo_destino))
                moved_files.append(archivo_destino.name)
        
        if pelicula2_selected:
            ruta2 = row.get('Ruta 2', '')
            if ruta2 and os.path.exists(ruta2):
                archivo_origen = Path(ruta2)
                archivo_destino = debug_path / archivo_origen.name
                
                # Si ya existe, agregar n√∫mero
                contador = 1
                while archivo_destino.exists():
                    nombre_base = archivo_origen.stem
                    extension = archivo_origen.suffix
                    archivo_destino = debug_path / f"{nombre_base}_{contador}{extension}"
                    contador += 1
                
                shutil.move(str(archivo_origen), str(archivo_destino))
                moved_files.append(archivo_destino.name)
        
        if moved_files:
            st.success(f"‚úÖ Archivos movidos a debug: {', '.join(moved_files)}")
            st.info(f"üìÅ Ubicaci√≥n: {debug_folder}")
        else:
            st.warning("‚ö†Ô∏è No se encontraron archivos para mover")
    
    def _delete_selected_files(self, row: Dict[str, Any]):
        """Elimina archivos seleccionados (modo normal)"""
        deleted_files = []
        
        # Verificar qu√© archivos est√°n seleccionados
        index = row.get('index', 0)
        pelicula1_selected = st.session_state.get(f"selected_{index}_1", False)
        pelicula2_selected = st.session_state.get(f"selected_{index}_2", False)
        
        if pelicula1_selected:
            ruta1 = row.get('Ruta 1', '')
            if ruta1 and os.path.exists(ruta1):
                os.remove(ruta1)
                deleted_files.append(Path(ruta1).name)
        
        if pelicula2_selected:
            ruta2 = row.get('Ruta 2', '')
            if ruta2 and os.path.exists(ruta2):
                os.remove(ruta2)
                deleted_files.append(Path(ruta2).name)
        
        if deleted_files:
            st.success(f"‚úÖ Archivos eliminados: {', '.join(deleted_files)}")
        else:
            st.warning("‚ö†Ô∏è No se encontraron archivos para eliminar")
    
    def _get_plex_metadata_for_pair(self, row: Dict[str, Any]) -> Optional[Dict]:
        """Obtiene metadatos de Plex para un par de pel√≠culas"""
        try:
            # Extraer nombres de archivo de las rutas
            filename1 = os.path.basename(row.get('Ruta 1', ''))
            filename2 = os.path.basename(row.get('Ruta 2', ''))
            
            if not filename1 or not filename2:
                return None
            
            # Obtener metadatos para ambos archivos
            metadata1 = self.plex_service.get_movie_metadata_by_filename(filename1)
            metadata2 = self.plex_service.get_movie_metadata_by_filename(filename2)
            
            if metadata1 or metadata2:
                return {
                    'file1': metadata1,
                    'file2': metadata2,
                    'compatibility': self._check_plex_compatibility(metadata1, metadata2)
                }
            
            return None
            
        except Exception as e:
            st.error(f"Error obteniendo metadatos de Plex: {e}")
            return None
    
    def _check_plex_compatibility(self, metadata1: Optional[Dict], metadata2: Optional[Dict]) -> Dict:
        """Verifica compatibilidad entre dos pel√≠culas usando metadatos de Plex"""
        if not metadata1 or not metadata2:
            return {
                'compatible': True,
                'message': 'No se pudieron obtener metadatos de Plex',
                'duration_check': None
            }
        
        # Verificar duraci√≥n si est√° habilitado
        duration_compatible, duration_message = self.plex_service.check_duration_compatibility(
            metadata1, metadata2
        )
        
        return {
            'compatible': duration_compatible,
            'message': duration_message,
            'duration_check': {
                'compatible': duration_compatible,
                'message': duration_message
            }
        }
    
    def _render_plex_metadata(self, plex_metadata: Dict):
        """Renderiza los metadatos de Plex para un par"""
        st.subheader("üé¨ Metadatos de Plex")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**Pel√≠cula 1:**")
            metadata1 = plex_metadata['file1']
            if metadata1:
                # Analizar si es None o no encontrado
                title = metadata1.get('title', 'N/A')
                year = metadata1.get('year', 'N/A')
                
                if title == 'N/A' or year == 'N/A' or year is None:
                    st.write("üîç **Archivo no identificado en Plex**")
                    st.write("üí° *Solo disponible por nombre de archivo*")
                else:
                    # Verificar si es duplicado (mismo t√≠tulo y a√±o)
                    is_duplicate = self._is_plex_duplicate(metadata1, plex_metadata.get('file2', {}))
                    title_color = "üî¥" if is_duplicate else "üé¨"
                    
                    st.write(f"{title_color} **{title}** ({year})")
                    st.write(f"üìä Estudio: {metadata1.get('studio', 'N/A')}")
                    st.write(f"‚è±Ô∏è Duraci√≥n: {metadata1.get('duration', 'N/A')}")
                    st.write(f"üìÅ Biblioteca: {metadata1.get('library_name', 'N/A')}")
                    st.write(f"üìù Resumen: {metadata1.get('summary', 'N/A')[:100]}...")
            else:
                st.write("‚ùå No encontrada en Plex")
                st.write("üí° *Solo disponible por nombre de archivo*")
        
        with col2:
            st.write("**Pel√≠cula 2:**")
            metadata2 = plex_metadata['file2']
            if metadata2:
                # Analizar si es None o no encontrado
                title = metadata2.get('title', 'N/A')
                year = metadata2.get('year', 'N/A')
                
                if title == 'N/A' or year == 'N/A' or year is None:
                    st.write("üîç **Archivo no identificado en Plex**")
                    st.write("üí° *Solo disponible por nombre de archivo*")
                else:
                    # Verificar si es duplicado (mismo t√≠tulo y a√±o)
                    is_duplicate = self._is_plex_duplicate(metadata2, plex_metadata.get('file1', {}))
                    title_color = "üî¥" if is_duplicate else "üé¨"
                    
                    st.write(f"{title_color} **{title}** ({year})")
                    st.write(f"üìä Estudio: {metadata2.get('studio', 'N/A')}")
                    st.write(f"‚è±Ô∏è Duraci√≥n: {metadata2.get('duration', 'N/A')}")
                    st.write(f"üìÅ Biblioteca: {metadata2.get('library_name', 'N/A')}")
                    st.write(f"üìù Resumen: {metadata2.get('summary', 'N/A')[:100]}...")
            else:
                st.write("‚ùå No encontrada en Plex")
                st.write("üí° *Solo disponible por nombre de archivo*")
        
        # Mostrar an√°lisis de compatibilidad
        compatibility = plex_metadata['compatibility']
        if compatibility['duration_check']:
            duration_check = compatibility['duration_check']
            if duration_check['compatible']:
                st.success(f"‚úÖ {duration_check['message']}")
            else:
                st.warning(f"‚ö†Ô∏è {duration_check['message']}")
        
        st.markdown("---")
    
    def _is_plex_duplicate(self, metadata1: Dict, metadata2: Dict) -> bool:
        """Verifica si dos metadatos de Plex representan la misma pel√≠cula"""
        if not metadata1 or not metadata2:
            return False
        
        # Comparar t√≠tulo y a√±o
        title1 = metadata1.get('title', '')
        title2 = metadata2.get('title', '')
        year1 = metadata1.get('year', '')
        year2 = metadata2.get('year', '')
        
        # Si tienen el mismo t√≠tulo y a√±o, son la misma pel√≠cula
        return title1 == title2 and year1 == year2 and title1 != 'N/A' and year1 != 'N/A'
    

    def _render_basic_info_immediate(self, row: Dict[str, Any], index: int):
        """Renderiza informaci√≥n b√°sica inmediatamente (nombres, tama√±os, rutas)"""
        st.subheader("üìÅ Informaci√≥n B√°sica")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**Pel√≠cula 1:**")
            st.markdown(f"<h4 style='color: #1f77b4'>{row.get('Peli 1', 'N/A')}</h4>", unsafe_allow_html=True)
            # Obtener tama√±o real del archivo
            ruta1 = row.get('Ruta 1', '')
            if ruta1:
                file_info = self._get_file_info(ruta1)
                if file_info and 'size' in file_info:
                    size_gb = file_info['size'] / (1024**3)
                    st.write(f"üìä Tama√±o: {size_gb:.2f} GB")
                else:
                    st.write(f"üìä Tama√±o: {row.get('Tama√±o 1 (GB)', 'N/A')} GB")
            else:
                st.write(f"üìä Tama√±o: {row.get('Tama√±o 1 (GB)', 'N/A')} GB")
            st.write(f"‚è±Ô∏è Duraci√≥n: {row.get('Duraci√≥n 1', 'N/A')}")
            st.write(f"üìÅ Ruta: {row.get('Ruta 1', 'N/A')}")
            
            # Fecha de creaci√≥n
            ruta1 = row.get('Ruta 1', '')
            if ruta1:
                creation_date1 = self._format_creation_date(ruta1)
                st.write(f"üìÖ Creado: {creation_date1}")
                
                # Obtener comparaci√≥n para mostrar etiqueta
                ruta2 = row.get('Ruta 2', '')
                if ruta2:
                    comparison = self._compare_creation_dates(ruta1, ruta2)
                    if comparison['newer'] == 1:
                        st.markdown("üÜï **Archivo m√°s nuevo**")
                    elif comparison['newer'] == 2:
                        st.markdown("üìú **Archivo m√°s viejo**")
            
            # Informaci√≥n de video local
            if ruta1 and os.path.exists(ruta1):
                self._render_local_video_info(ruta1, f"local1_{index}")
        
        with col2:
            st.write("**Pel√≠cula 2:**")
            st.markdown(f"<h4 style='color: #ff7f0e'>{row.get('Peli 2', 'N/A')}</h4>", unsafe_allow_html=True)
            # Obtener tama√±o real del archivo
            ruta2 = row.get('Ruta 2', '')
            if ruta2:
                file_info = self._get_file_info(ruta2)
                if file_info and 'size' in file_info:
                    size_gb = file_info['size'] / (1024**3)
                    st.write(f"üìä Tama√±o: {size_gb:.2f} GB")
                else:
                    st.write(f"üìä Tama√±o: {row.get('Tama√±o 2 (GB)', 'N/A')} GB")
            else:
                st.write(f"üìä Tama√±o: {row.get('Tama√±o 2 (GB)', 'N/A')} GB")
            st.write(f"‚è±Ô∏è Duraci√≥n: {row.get('Duraci√≥n 2', 'N/A')}")
            st.write(f"üìÅ Ruta: {row.get('Ruta 2', 'N/A')}")
            
            # Fecha de creaci√≥n
            ruta2 = row.get('Ruta 2', '')
            if ruta2:
                creation_date2 = self._format_creation_date(ruta2)
                st.write(f"üìÖ Creado: {creation_date2}")
                
                # Obtener comparaci√≥n para mostrar etiqueta
                ruta1 = row.get('Ruta 1', '')
                if ruta1:
                    comparison = self._compare_creation_dates(ruta1, ruta2)
                    if comparison['newer'] == 2:
                        st.markdown("üÜï **Archivo m√°s nuevo**")
                    elif comparison['newer'] == 1:
                        st.markdown("üìú **Archivo m√°s viejo**")
            
            # Informaci√≥n de video local
            ruta2 = row.get('Ruta 2', '')
            if ruta2 and os.path.exists(ruta2):
                self._render_local_video_info(ruta2, f"local2_{index}")
        
        # Comparaci√≥n de fechas de creaci√≥n
        ruta1 = row.get('Ruta 1', '')
        ruta2 = row.get('Ruta 2', '')
        if ruta1 and ruta2:
            self._render_creation_date_comparison(ruta1, ruta2)
        
        st.markdown("---")
    
    def _render_plex_metadata_optional(self, row: Dict[str, Any], index: int):
        """Renderiza metadatos de Plex en expander opcional"""
        # Verificar si ya tenemos cache para estos archivos
        filename1 = os.path.basename(row.get('Ruta 1', ''))
        filename2 = os.path.basename(row.get('Ruta 2', ''))
        
        cache_key = f"{filename1}_{filename2}"
        
        if cache_key in st.session_state.plex_cache:
            # Usar cache
            plex_metadata = st.session_state.plex_cache[cache_key]
            self._render_plex_metadata_content(plex_metadata)
        else:
            # Consultar Plex
            if st.button("üîç Cargar Metadatos de Plex", key=f"load_plex_{index}"):
                with st.spinner("Consultando base de datos de Plex..."):
                    plex_metadata = self._get_plex_metadata_for_pair(row)
                    
                    if plex_metadata:
                        # Guardar en cache
                        st.session_state.plex_cache[cache_key] = plex_metadata
                        self._render_plex_metadata_content(plex_metadata)
                        st.success("‚úÖ Metadatos cargados")
                    else:
                        st.info("üí° No se encontraron metadatos en Plex para estos archivos")
            else:
                st.info("üí° Haz clic en 'Cargar Metadatos de Plex' para obtener informaci√≥n adicional")
    
    def _render_plex_metadata_content(self, plex_metadata: Dict):
        """Renderiza el contenido de metadatos de Plex"""
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**Pel√≠cula 1:**")
            metadata1 = plex_metadata['file1']
            if metadata1:
                # Analizar si es None o no encontrado
                title = metadata1.get('title', 'N/A')
                year = metadata1.get('year', 'N/A')
                
                if title == 'N/A' or year == 'N/A' or year is None:
                    st.write("üîç **Archivo no identificado en Plex**")
                    st.write("üí° *Solo disponible por nombre de archivo*")
                else:
                    st.write(f"üé¨ **{title}** ({year})")
                    st.write(f"üìä Estudio: {metadata1.get('studio', 'N/A')}")
                    st.write(f"‚è±Ô∏è Duraci√≥n: {metadata1.get('duration_hms_meta', 'N/A')}")
                    st.write(f"üé• Resoluci√≥n: {metadata1.get('width', 'N/A')}x{metadata1.get('height', 'N/A')}")
                    st.write(f"üì¶ Contenedor: {metadata1.get('container', 'N/A')}")
                    st.write(f"üéµ Audio: {metadata1.get('audio_codec', 'N/A')} ({metadata1.get('audio_channels', 'N/A')} canales)")
            else:
                st.write("‚ùå No encontrada en Plex")
                st.write("üí° *Solo disponible por nombre de archivo*")
        
        with col2:
            st.write("**Pel√≠cula 2:**")
            metadata2 = plex_metadata['file2']
            if metadata2:
                # Analizar si es None o no encontrado
                title = metadata2.get('title', 'N/A')
                year = metadata2.get('year', 'N/A')
                
                if title == 'N/A' or year == 'N/A' or year is None:
                    st.write("üîç **Archivo no identificado en Plex**")
                    st.write("üí° *Solo disponible por nombre de archivo*")
                else:
                    st.write(f"üé¨ **{title}** ({year})")
                    st.write(f"üìä Estudio: {metadata2.get('studio', 'N/A')}")
                    st.write(f"‚è±Ô∏è Duraci√≥n: {metadata2.get('duration_hms_meta', 'N/A')}")
                    st.write(f"üé• Resoluci√≥n: {metadata2.get('width', 'N/A')}x{metadata2.get('height', 'N/A')}")
                    st.write(f"üì¶ Contenedor: {metadata2.get('container', 'N/A')}")
                    st.write(f"üéµ Audio: {metadata2.get('audio_codec', 'N/A')} ({metadata2.get('audio_channels', 'N/A')} canales)")
            else:
                st.write("‚ùå No encontrada en Plex")
                st.write("üí° *Solo disponible por nombre de archivo*")
        
        # Mostrar an√°lisis de compatibilidad
        compatibility = plex_metadata['compatibility']
        if compatibility['duration_check']:
            duration_check = compatibility['duration_check']
            if duration_check['compatible']:
                st.success(f"‚úÖ {duration_check['message']}")
            else:
                st.warning(f"‚ö†Ô∏è {duration_check['message']}")

    def _render_plex_metadata_auto(self, row: Dict[str, Any], index: int):
        """Renderiza informaci√≥n de Plex: biblioteca + opciones de mejora"""
        # Verificar si ya tenemos cache para estos archivos
        filename1 = os.path.basename(row.get('Ruta 1', ''))
        filename2 = os.path.basename(row.get('Ruta 2', ''))
        
        cache_key = f"{filename1}_{filename2}"
        
        if cache_key in st.session_state.plex_cache:
            # Usar cache
            plex_info = st.session_state.plex_cache[cache_key]
            self._render_plex_library_info(plex_info, row, index)
        else:
            # Consultar Plex autom√°ticamente
            with st.spinner("üîç Consultando base de datos de Plex..."):
                plex_info = self._get_plex_library_info_for_pair(row)
                
                if plex_info:
                    # Guardar en cache
                    st.session_state.plex_cache[cache_key] = plex_info
                    self._render_plex_library_info(plex_info, row, index)
                else:
                    st.info("üí° No se encontraron archivos en Plex")
                    self._render_plex_enhancement_options(row, index)
        
        st.markdown("---")

    def _render_local_video_info(self, file_path: str, key: str):
        """Renderiza informaci√≥n de video local"""
        try:
            # Obtener informaci√≥n del video
            video_info = self.video_info_service.get_summary_info(file_path)
            
            if video_info:
                st.write("üé¨ **Informaci√≥n Local:**")
                st.write(f"‚è±Ô∏è Duraci√≥n: {video_info['duration']}")
                st.write(f"üé• Resoluci√≥n: {video_info['resolution']}")
                st.write(f"üì∫ Calidad: {video_info['quality']}")
                st.write(f"üéµ Audio: {video_info['audio']}")
                st.write(f"üì¶ Contenedor: {video_info['container']}")
                
                if video_info['fps'] != 'N/A':
                    st.write(f"üéûÔ∏è FPS: {video_info['fps']}")
                if video_info['bitrate'] != 'N/A':
                    st.write(f"üìä Bitrate: {video_info['bitrate']}")
            else:
                st.write("‚ùå No se pudo obtener informaci√≥n del video")
                
        except Exception as e:
            st.write(f"‚ùå Error obteniendo informaci√≥n: {e}")

    def _get_plex_library_info_for_pair(self, row: Dict[str, Any]) -> Optional[Dict]:
        """Obtiene informaci√≥n de biblioteca de Plex para un par de pel√≠culas"""
        try:
            # Extraer nombres de archivo de las rutas
            filename1 = os.path.basename(row.get('Ruta 1', ''))
            filename2 = os.path.basename(row.get('Ruta 2', ''))
            
            if not filename1 or not filename2:
                return None
            
            # Obtener informaci√≥n de biblioteca para ambos archivos
            library_info1 = self.plex_service.get_library_info_by_filename(filename1)
            library_info2 = self.plex_service.get_library_info_by_filename(filename2)
            
            # Si encontramos los archivos en Plex, intentar obtener t√≠tulos reales (sin bloquear)
            if library_info1:
                try:
                    real_title1 = self.plex_title_extractor.get_real_title_by_filename(filename1)
                    if real_title1:
                        library_info1['title'] = real_title1['title']
                        library_info1['year'] = real_title1['year']
                except Exception:
                    # Si falla, mantener el t√≠tulo del archivo
                    pass
            
            if library_info2:
                try:
                    real_title2 = self.plex_title_extractor.get_real_title_by_filename(filename2)
                    if real_title2:
                        library_info2['title'] = real_title2['title']
                        library_info2['year'] = real_title2['year']
                except Exception:
                    # Si falla, mantener el t√≠tulo del archivo
                    pass
            
            if library_info1 or library_info2:
                return {
                    'file1': library_info1,
                    'file2': library_info2
                }
            
            return None
            
        except Exception as e:
            st.error(f"Error obteniendo informaci√≥n de biblioteca: {e}")
            return None
    
    def _render_plex_library_info(self, plex_info: Dict, row: Dict[str, Any], index: int):
        """Renderiza informaci√≥n de biblioteca de Plex"""
        st.subheader("üé¨ Estado en Plex")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**Pel√≠cula 1:**")
            library_info1 = plex_info['file1']
            if library_info1:
                st.success(f"‚úÖ Encontrada en biblioteca: {library_info1.get('library_name', 'N/A')}")
                st.write(f"üìÅ T√≠tulo: {library_info1.get('title', 'N/A')}")
                st.write(f"üìÖ A√±o: {library_info1.get('year', 'N/A')}")
            else:
                st.warning("‚ùå No encontrada en Plex")
                self._render_enhancement_options_for_file(row.get('Ruta 1', ''), f"enhance1_{index}")
        
        with col2:
            st.write("**Pel√≠cula 2:**")
            library_info2 = plex_info['file2']
            if library_info2:
                st.success(f"‚úÖ Encontrada en biblioteca: {library_info2.get('library_name', 'N/A')}")
                st.write(f"üìÅ T√≠tulo: {library_info2.get('title', 'N/A')}")
                st.write(f"üìÖ A√±o: {library_info2.get('year', 'N/A')}")
            else:
                st.warning("‚ùå No encontrada en Plex")
                self._render_enhancement_options_for_file(row.get('Ruta 2', ''), f"enhance2_{index}")
        
        # Verificar si son la misma pel√≠cula en Plex
        if library_info1 and library_info2:
            title1 = library_info1.get('title', '')
            title2 = library_info2.get('title', '')
            year1 = library_info1.get('year', '')
            year2 = library_info2.get('year', '')
            
            if title1 == title2 and year1 == year2 and title1 != 'N/A':
                # Usar el nuevo an√°lisis de ediciones
                self._render_plex_editions_analysis(plex_info, row, index)
    
    def _render_plex_editions_analysis(self, plex_info: Dict, row: Dict[str, Any], index: int):
        """Renderiza el an√°lisis de ediciones usando PlexEditionsManager"""
        st.markdown("---")
        st.subheader("üîç An√°lisis de Duplicados con Ediciones")
        
        try:
            # Obtener rutas de archivos
            file1_path = row.get('Ruta 1', '')
            file2_path = row.get('Ruta 2', '')
            
            # Mostrar indicador de progreso para an√°lisis que puede tardar
            with st.spinner("üîç Analizando duplicados (calculando hash si es necesario)..."):
                # An√°lisis completo con ediciones
                analysis = self.plex_editions_manager.analyze_duplicate_pair_with_editions(
                    file1_path, file2_path, plex_info['file1'], plex_info['file2']
                )
            
            # Mostrar resultados del an√°lisis
            self._display_editions_analysis(analysis, file1_path, file2_path, index)
            
        except Exception as e:
            st.error(f"‚ùå Error en an√°lisis de ediciones: {e}")
            # Fallback al m√©todo anterior
            self._render_legacy_duplicate_analysis(plex_info, row, index)
    
    def _display_editions_analysis(self, analysis: Dict, file1_path: str, file2_path: str, index: int):
        """Muestra los resultados del an√°lisis de ediciones"""
        
        if not analysis['same_movie']:
            st.info("üé¨ **Pel√≠culas diferentes** seg√∫n Plex")
            return
        
        # Mostrar informaci√≥n de ediciones existentes
        if analysis.get('has_existing_editions', False):
            st.info(f"üìö **Ediciones existentes**: {len(analysis['existing_editions'])} encontradas")
            
            with st.expander("Ver ediciones existentes"):
                for edition in analysis['existing_editions']:
                    st.write(f"‚Ä¢ **{edition['edition']}** ({edition['year']})")
                    if edition.get('summary'):
                        st.write(f"  _{edition['summary'][:100]}..._")
        
        # Mostrar si los archivos ya tienen ediciones
        if analysis.get('file1_has_edition', False):
            st.warning("‚ö†Ô∏è **Archivo 1** ya tiene una edici√≥n asignada")
            edition_info = analysis.get('file1_edition', {})
            st.write(f"   Edici√≥n: **{edition_info.get('edition', 'N/A')}**")
        
        if analysis.get('file2_has_edition', False):
            st.warning("‚ö†Ô∏è **Archivo 2** ya tiene una edici√≥n asignada")
            edition_info = analysis.get('file2_edition', {})
            st.write(f"   Edici√≥n: **{edition_info.get('edition', 'N/A')}**")
        
        # Mostrar recomendaciones
        recommendations = analysis.get('recommendations', [])
        if recommendations:
            st.info("üí° **Recomendaciones:**")
            for rec in recommendations:
                st.write(f"‚Ä¢ {rec}")
        
        # Mostrar an√°lisis espec√≠fico
        if analysis['recommendation'] == 'create_editions':
            self._render_editions_creation_ui(analysis, file1_path, file2_path, index)
        elif analysis['recommendation'] == 'delete_duplicate':
            self._render_delete_duplicate_ui(analysis, file1_path, file2_path, index)
        else:
            st.warning(f"‚ö†Ô∏è **An√°lisis no concluyente**: {analysis.get('message', 'Error desconocido')}")
    
    def _render_editions_creation_ui(self, analysis: Dict, file1_path: str, file2_path: str, index: int):
        """Renderiza la UI para crear ediciones"""
        
        if 'size_difference_percent' in analysis:
            st.warning("üé¨ **MISMA PEL√çCULA, ARCHIVOS DIFERENTES**")
            st.info(f"üí° **Tama√±os muy diferentes**: {analysis['file1_size_gb']:.2f}GB vs {analysis['file2_size_gb']:.2f}GB ({analysis['size_difference_percent']:.1f}% diferencia)")
        else:
            st.warning("üé¨ **MISMA PEL√çCULA, ARCHIVOS DIFERENTES**")
            st.info("üí° **Opciones**: Puedes crear ediciones diferentes en Plex")
        
        # Botones para crear ediciones
        col_edit1, col_edit2 = st.columns(2)
        
        with col_edit1:
            if st.button("üé¨ Crear Edici√≥n - Archivo 1", key=f"edition1_{index}"):
                self._show_edition_creator_advanced(file1_path, analysis, f"edition1_{index}")
        
        with col_edit2:
            if st.button("üé¨ Crear Edici√≥n - Archivo 2", key=f"edition2_{index}"):
                self._show_edition_creator_advanced(file2_path, analysis, f"edition2_{index}")
    
    def _render_delete_duplicate_ui(self, analysis: Dict, file1_path: str, file2_path: str, index: int):
        """Renderiza la UI para eliminar duplicados"""
        st.error("‚ö†Ô∏è **MISMO ARCHIVO**: El hash es id√©ntico")
        st.info("üí° **Recomendaci√≥n**: Es el mismo archivo con diferente nombre. Puedes eliminar uno de los dos.")
        
        # Botones para eliminar duplicados
        col_del1, col_del2 = st.columns(2)
        
        with col_del1:
            if st.button("üóëÔ∏è Eliminar Archivo 1", key=f"delete1_{index}"):
                st.warning("‚ö†Ô∏è Funci√≥n de eliminaci√≥n no implementada por seguridad")
        
        with col_del2:
            if st.button("üóëÔ∏è Eliminar Archivo 2", key=f"delete2_{index}"):
                st.warning("‚ö†Ô∏è Funci√≥n de eliminaci√≥n no implementada por seguridad")
    
    def _show_edition_creator_advanced(self, file_path: str, analysis: Dict, key: str):
        """Muestra el creador de ediciones avanzado"""
        st.markdown("---")
        st.subheader("üé¨ Crear Edici√≥n en Plex")
        
        # Mostrar informaci√≥n del archivo
        filename = os.path.basename(file_path)
        st.write(f"**Archivo:** {filename}")
        
        # Obtener t√≠tulo de la pel√≠cula
        movie_title = "Pel√≠cula"
        if analysis.get('file1_edition'):
            movie_title = analysis['file1_edition'].get('title', 'Pel√≠cula')
        elif analysis.get('file2_edition'):
            movie_title = analysis['file2_edition'].get('title', 'Pel√≠cula')
        
        st.write(f"**Pel√≠cula:** {movie_title}")
        
        # Obtener sugerencias de edici√≥n
        suggestions = self.plex_editions_manager.get_edition_suggestions_for_movie(movie_title)
        
        # Selector de edici√≥n
        selected_edition = st.selectbox(
            "Selecciona el tipo de edici√≥n:",
            ["Personalizada"] + suggestions,
            key=f"edition_type_{key}"
        )
        
        # Campo para edici√≥n personalizada
        if selected_edition == "Personalizada":
            custom_edition = st.text_input(
                "Nombre de la edici√≥n:",
                placeholder="Ej: Edici√≥n del Director, Versi√≥n Extendida...",
                key=f"custom_edition_{key}"
            )
            edition_name = custom_edition
        else:
            edition_name = selected_edition
        
        # Opci√≥n de subcarpeta
        create_subfolder = st.checkbox(
            "Crear subcarpeta para la edici√≥n",
            value=False,
            key=f"subfolder_{key}"
        )
        
        # Bot√≥n para aplicar
        if st.button("‚úÖ Crear Edici√≥n", key=f"apply_edition_{key}"):
            if edition_name:
                if self.plex_editions_manager.creator.validate_edition_name(edition_name):
                    new_path = self.plex_editions_manager.create_edition_for_file(
                        file_path, movie_title, edition_name, create_subfolder
                    )
                    
                    if new_path:
                        st.success("‚úÖ Edici√≥n creada exitosamente!")
                        st.info(f"üìÅ **Nuevo archivo:** {os.path.basename(new_path)}")
                        st.info("üí° **Siguiente paso:** Ejecuta un escaneo en Plex para que detecte la nueva edici√≥n")
                        
                        # Mostrar instrucciones
                        st.markdown("### üìã Instrucciones para Plex:")
                        st.markdown("""
                        1. **Abre Plex Media Server**
                        2. **Ve a la biblioteca** donde est√° la pel√≠cula
                        3. **Haz clic en "M√°s" ‚Üí "Escanear archivos de biblioteca"**
                        4. **Espera** a que termine el escaneo
                        5. **Verifica** que aparezca la nueva edici√≥n
                        """)
                    else:
                        st.error("‚ùå Error creando la edici√≥n")
                else:
                    st.error("‚ùå Nombre de edici√≥n inv√°lido. Evita caracteres especiales.")
            else:
                st.error("‚ùå Debes especificar un nombre para la edici√≥n")
    
    def _render_legacy_duplicate_analysis(self, plex_info: Dict, row: Dict[str, Any], index: int):
        """M√©todo de respaldo para an√°lisis de duplicados (m√©todo anterior)"""
        st.warning("‚ö†Ô∏è Usando an√°lisis de respaldo...")
        
        # Obtener informaci√≥n de archivos (tama√±o y fecha)
        file_info1 = self._get_file_info(row.get('Ruta 1', ''))
        file_info2 = self._get_file_info(row.get('Ruta 2', ''))

        if file_info1 and file_info2:
            size1 = file_info1['size']
            size2 = file_info2['size']
            
            # Calcular diferencia porcentual de tama√±o
            size_diff_percent = abs(size1 - size2) / max(size1, size2) * 100 if max(size1, size2) > 0 else 0
            
            # DECISI√ìN INTELIGENTE: Solo calcular hash si tama√±os son similares
            if size_diff_percent > 10:  # Si la diferencia es mayor al 10%
                st.warning("üé¨ **MISMA PEL√çCULA, ARCHIVOS DIFERENTES**")
                st.info(f"üí° **Tama√±os muy diferentes**: {size1/1024/1024/1024:.2f}GB vs {size2/1024/1024/1024:.2f}GB ({size_diff_percent:.1f}% diferencia)")
                st.info("üí° **Opciones**: Puedes crear ediciones diferentes en Plex")
                
                # Botones para crear ediciones (sin calcular hash)
                col_edit1, col_edit2 = st.columns(2)
                with col_edit1:
                    if st.button("üé¨ Crear Edici√≥n - Pel√≠cula 1", key=f"edition1_{index}"):
                        self._show_edition_creator_advanced(row.get('Ruta 1', ''), {'file1_edition': {'title': 'Pel√≠cula'}}, f"edition1_{index}")
                with col_edit2:
                    if st.button("üé¨ Crear Edici√≥n - Pel√≠cula 2", key=f"edition2_{index}"):
                        self._show_edition_creator_advanced(row.get('Ruta 2', ''), {'file2_edition': {'title': 'Pel√≠cula'}}, f"edition2_{index}")
            else:
                # Tama√±os similares - proceder a calcular hash
                st.info(f"üìä **Tama√±os similares**: {size1/1024/1024/1024:.2f}GB vs {size2/1024/1024/1024:.2f}GB ({size_diff_percent:.1f}% diferencia)")
                st.info("üîç Calculando hash para verificar si son id√©nticos...")
                
                with st.spinner("üîç Calculando hash de archivos..."):
                    hash1 = self._calculate_file_hash(row.get('Ruta 1', ''))
                    hash2 = self._calculate_file_hash(row.get('Ruta 2', ''))
                
                if hash1 and hash2:
                    if hash1 == hash2:
                        st.error("‚ö†Ô∏è **MISMO ARCHIVO**: El hash es id√©ntico")
                        st.info("üí° **Recomendaci√≥n**: Es el mismo archivo con diferente nombre. Puedes eliminar uno de los dos.")
                    else:
                        st.warning("üé¨ **MISMA PEL√çCULA, ARCHIVOS DIFERENTES**")
                        st.info("üí° **Opciones**: Puedes crear ediciones diferentes en Plex")
                        
                        # Botones para crear ediciones
                        col_edit1, col_edit2 = st.columns(2)
                        with col_edit1:
                            if st.button("üé¨ Crear Edici√≥n - Pel√≠cula 1", key=f"edition1_{index}"):
                                self._show_edition_creator_advanced(row.get('Ruta 1', ''), {'file1_edition': {'title': 'Pel√≠cula'}}, f"edition1_{index}")
                        with col_edit2:
                            if st.button("üé¨ Crear Edici√≥n - Pel√≠cula 2", key=f"edition2_{index}"):
                                self._show_edition_creator_advanced(row.get('Ruta 2', ''), {'file2_edition': {'title': 'Pel√≠cula'}}, f"edition2_{index}")
                else:
                    # Fallback si el c√°lculo de hash falla (a pesar de tama√±os similares)
                    st.warning("‚ö†Ô∏è No se pudo calcular hash, usando comparaci√≥n por fecha...")
                    if (file_info1['mtime'] == file_info2['mtime']):
                        st.error("‚ö†Ô∏è **MISMO ARCHIVO**: Tama√±o y fecha id√©nticos")
                        st.info("üí° **Recomendaci√≥n**: Es el mismo archivo con diferente nombre. Puedes eliminar uno de los dos.")
                    else:
                        st.warning("üé¨ **MISMA PEL√çCULA, ARCHIVOS DIFERENTES**")
                        st.info("üí° **Opciones**: Puedes crear ediciones diferentes en Plex")
                        
                        # Botones para crear ediciones
                        col_edit1, col_edit2 = st.columns(2)
                        with col_edit1:
                            if st.button("üé¨ Crear Edici√≥n - Pel√≠cula 1", key=f"edition1_{index}"):
                                self._show_edition_creator_advanced(row.get('Ruta 1', ''), {'file1_edition': {'title': 'Pel√≠cula'}}, f"edition1_{index}")
                        with col_edit2:
                            if st.button("üé¨ Crear Edici√≥n - Pel√≠cula 2", key=f"edition2_{index}"):
                                self._show_edition_creator_advanced(row.get('Ruta 2', ''), {'file2_edition': {'title': 'Pel√≠cula'}}, f"edition2_{index}")
        else:
            st.warning("‚ö†Ô∏è No se pudo obtener informaci√≥n de tama√±o/fecha de los archivos.")
    
    def _render_plex_enhancement_options(self, row: Dict[str, Any], index: int):
        """Renderiza opciones de mejora cuando no se encuentran archivos en Plex"""
        st.subheader("üîß Opciones de Mejora")
        st.info("üí° Los archivos no est√°n en Plex. Puedes mejorarlos:")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**Pel√≠cula 1:**")
            self._render_enhancement_options_for_file(row.get('Ruta 1', ''), f"enhance1_{index}")
        
        with col2:
            st.write("**Pel√≠cula 2:**")
            self._render_enhancement_options_for_file(row.get('Ruta 2', ''), f"enhance2_{index}")
    
    def _render_enhancement_options_for_file(self, file_path: str, key: str):
        """Renderiza opciones de mejora para un archivo espec√≠fico"""
        if not file_path:
            st.write("‚ùå Ruta no disponible")
            return
        
        filename = os.path.basename(file_path)
        st.write(f"üìÅ {filename}")
        
        # Opci√≥n 1: Renombrar archivo
        with st.expander("üìù Renombrar archivo", expanded=False):
            st.write("üí° Renombra el archivo para que Plex lo reconozca mejor")
            
            new_name = st.text_input(
                "Nuevo nombre (sin extensi√≥n):",
                value=filename.rsplit('.', 1)[0],
                key=f"rename_{key}",
                help="Ejemplo: 'Avatar (2009)' o 'Avatar (2009) {edition-Director\'s Cut}'"
            )
            
            col1, col2 = st.columns([1, 1])
            
            with col1:
                if st.button("üíæ Renombrar", key=f"rename_btn_{key}"):
                    self._rename_file(file_path, new_name)
            
            with col2:
                # Bot√≥n para refrescar b√∫squeda de Plex despu√©s de renombrar
                if st.button("üîÑ Refrescar Plex", key=f"refresh_plex_{key}", 
                           help="Refresca la b√∫squeda de Plex para ver si ahora encuentra el archivo"):
                    self._refresh_plex_search_for_file(file_path)
        
        # Opci√≥n 2: Crear edici√≥n diferente
        with st.expander("üé¨ Crear edici√≥n diferente", expanded=False):
            st.write("üí° Crea una edici√≥n diferente de una pel√≠cula existente")
            
            # Obtener lista de pel√≠culas de Plex
            movies_list = self._get_plex_movies_list()
            
            if movies_list:
                selected_movie = st.selectbox(
                    "Seleccionar pel√≠cula base:",
                    options=movies_list,
                    key=f"movie_select_{key}",
                    help="Selecciona la pel√≠cula de la que quieres crear una edici√≥n"
                )
                
                edition_name = st.text_input(
                    "Nombre de la edici√≥n:",
                    key=f"edition_{key}",
                    help="Ejemplo: 'Director\'s Cut', 'Extended Edition', 'Unrated'"
                )
                
                if st.button("üé¨ Crear Edici√≥n", key=f"edition_btn_{key}"):
                    self._create_edition(file_path, selected_movie, edition_name)
            else:
                st.warning("‚ùå No se pudo cargar la lista de pel√≠culas de Plex")
    
    def _get_plex_movies_list(self) -> List[str]:
        """Obtiene lista de pel√≠culas de Plex para selecci√≥n"""
        try:
            # Obtener pel√≠culas de Plex
            movies = self.plex_service.get_all_movies()
            return [f"{movie.get('title', 'N/A')} ({movie.get('year', 'N/A')})" for movie in movies]
        except Exception as e:
            st.error(f"Error obteniendo pel√≠culas: {e}")
            return []
    
    def _rename_file(self, file_path: str, new_name: str):
        """Renombra un archivo"""
        try:
            if not new_name:
                st.error("‚ùå Nombre no puede estar vac√≠o")
                return
            
            # Obtener directorio y extensi√≥n
            directory = os.path.dirname(file_path)
            extension = os.path.splitext(file_path)[1]
            new_path = os.path.join(directory, f"{new_name}{extension}")
            
            # Renombrar archivo
            os.rename(file_path, new_path)
            st.success(f"‚úÖ Archivo renombrado: {os.path.basename(new_path)}")
            
            # Refrescar biblioteca de Plex autom√°ticamente
            self._refresh_plex_after_rename()
            
            st.rerun()
            
        except Exception as e:
            st.error(f"‚ùå Error renombrando archivo: {e}")
    
    def _create_edition(self, file_path: str, selected_movie: str, edition_name: str):
        """Crea una edici√≥n diferente de una pel√≠cula con soporte para rutas UNC"""
        try:
            if not edition_name:
                st.error("‚ùå Nombre de edici√≥n no puede estar vac√≠o")
                return
            
            # Extraer t√≠tulo y a√±o de la pel√≠cula seleccionada
            # Formato: "T√≠tulo (A√±o)"
            import re
            match = re.match(r"(.+?)\s*\((\d{4})\)", selected_movie)
            if not match:
                st.error("‚ùå Formato de pel√≠cula no v√°lido")
                return
            
            title, year = match.groups()
            
            # Crear nuevo nombre con edici√≥n
            directory = os.path.dirname(file_path)
            extension = os.path.splitext(file_path)[1]
            new_name = f"{title} ({year}) {{edition-{edition_name}}}{extension}"
            new_path = os.path.join(directory, new_name)
            
            # Verificar si es una ruta UNC
            is_unc = file_path.startswith('\\')
            
            if is_unc:
                # Para rutas UNC, usar manejo especial
                try:
                    # Intentar renombrar directamente
                    os.rename(file_path, new_path)
                    st.success(f"‚úÖ Edici√≥n creada: {os.path.basename(new_path)}")
                    
                    # Refrescar biblioteca de Plex autom√°ticamente
                    self._refresh_plex_after_rename()
                    
                    st.rerun()
                except Exception as unc_error:
                    st.warning(f"‚ö†Ô∏è Error con ruta UNC: {unc_error}")
                    st.info("üí° Intentando con m√©todo alternativo...")
                    
                    # M√©todo alternativo para UNC
                    try:
                        import shutil
                        shutil.move(file_path, new_path)
                        st.success(f"‚úÖ Edici√≥n creada (m√©todo alternativo): {os.path.basename(new_path)}")
                        
                        # Refrescar biblioteca de Plex autom√°ticamente
                        self._refresh_plex_after_rename()
                        
                        st.rerun()
                    except Exception as alt_error:
                        st.error(f"‚ùå Error con m√©todo alternativo: {alt_error}")
                        st.error("üí° Verifica que tienes permisos de escritura en la ruta UNC")
            else:
                # Para rutas locales, usar m√©todo normal
                os.rename(file_path, new_path)
                st.success(f"‚úÖ Edici√≥n creada: {os.path.basename(new_path)}")
                
                # Refrescar biblioteca de Plex autom√°ticamente
                self._refresh_plex_after_rename()
                
                st.rerun()
            
        except Exception as e:
            st.error(f"‚ùå Error creando edici√≥n: {e}")
    
    def _refresh_plex_after_rename(self):
        """Refresca autom√°ticamente la biblioteca de Plex despu√©s de un renombrado"""
        try:
            # Verificar si Plex est√° configurado
            if not self.plex_refresh_service.is_configured():
                st.info("üí° Plex no configurado - no se puede refrescar autom√°ticamente")
                return
            
            # Determinar qu√© biblioteca refrescar bas√°ndose en la configuraci√≥n
            movies_library = settings.get_plex_movies_library()
            tv_library = settings.get_plex_tv_shows_library()
            
            # Intentar refrescar biblioteca de pel√≠culas primero
            if movies_library:
                with st.spinner("üîÑ Refrescando biblioteca de pel√≠culas..."):
                    if self.plex_refresh_service.refresh_library_by_name(movies_library):
                        st.success("‚úÖ Biblioteca de pel√≠culas refrescada autom√°ticamente")
                    else:
                        st.warning("‚ö†Ô∏è No se pudo refrescar la biblioteca de pel√≠culas")
            
            # Si hay biblioteca de series configurada, tambi√©n refrescarla
            if tv_library and tv_library != movies_library:
                with st.spinner("üîÑ Refrescando biblioteca de series..."):
                    if self.plex_refresh_service.refresh_library_by_name(tv_library):
                        st.success("‚úÖ Biblioteca de series refrescada autom√°ticamente")
                    else:
                        st.warning("‚ö†Ô∏è No se pudo refrescar la biblioteca de series")
                        
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Error refrescando Plex autom√°ticamente: {e}")
            st.info("üí° Puedes refrescar manualmente desde la configuraci√≥n de Plex")
    
    def _refresh_plex_search_for_file(self, file_path: str):
        """Refresca la b√∫squeda de Plex para un archivo espec√≠fico"""
        try:
            with st.spinner("üîÑ Refrescando b√∫squeda de Plex..."):
                # Refrescar biblioteca primero
                self._refresh_plex_after_rename()
                
                # Esperar un momento para que Plex procese
                import time
                time.sleep(2)
                
                # Buscar el archivo nuevamente en Plex
                plex_info = self.plex_service.get_library_info_by_filename(file_path)
                
                if plex_info:
                    st.success("‚úÖ ¬°Archivo encontrado en Plex!")
                    st.info(f"üìö Biblioteca: {plex_info.get('library_name', 'N/A')}")
                    st.info(f"üé¨ T√≠tulo: {plex_info.get('title', 'N/A')}")
                    st.info(f"üìÖ A√±o: {plex_info.get('year', 'N/A')}")
                    st.rerun()  # Refrescar la interfaz para mostrar el nuevo estado
                else:
                    st.warning("‚ö†Ô∏è Archivo a√∫n no encontrado en Plex")
                    st.info("üí° Puede que necesites esperar m√°s tiempo o refrescar manualmente")
                    
        except Exception as e:
            st.error(f"‚ùå Error refrescando b√∫squeda: {e}")
    
    def _save_scan_data(self):
        """Guarda los datos del escaneo actual"""
        try:
            if not hasattr(st.session_state, 'duplicados') or not st.session_state.duplicados:
                st.warning("‚ö†Ô∏è No hay datos de escaneo para guardar")
                return
            
            # Obtener ruta escaneada
            scan_path = getattr(st.session_state, 'last_scan_path', 'Carpeta desconocida')
            
            # Guardar datos
            file_path = self.scan_data_manager.save_scan_data(
                pairs_data=st.session_state.duplicados,
                scan_path=scan_path
            )
            
            st.success(f"‚úÖ Escaneo guardado: {Path(file_path).name}")
            
        except Exception as e:
            st.error(f"‚ùå Error guardando escaneo: {e}")
    
    def _show_load_scan_interface(self):
        """Muestra la interfaz para cargar un escaneo"""
        try:
            scans = self.scan_data_manager.get_available_scans()
            
            if not scans:
                st.info("üìã No hay escaneos guardados")
                return
            
            st.subheader("üìÇ Cargar Escaneo Guardado")
            
            # Crear opciones para el selectbox
            scan_options = []
            for scan in scans:
                scan_date = scan.get('scan_date', 'N/A')
                scan_path = scan.get('scan_path', 'N/A')
                total_pairs = scan.get('total_pairs', 0)
                scan_options.append(f"{scan_date[:19]} - {scan_path} ({total_pairs} pares)")
            
            selected_scan = st.selectbox(
                "Seleccionar escaneo:",
                options=range(len(scans)),
                format_func=lambda x: scan_options[x],
                key="load_scan_select"
            )
            
            col1, col2 = st.columns(2)
            with col1:
                if st.button("üìÇ Cargar Escaneo Seleccionado"):
                    # Cargar directamente el escaneo
                    self._load_scan_data(scans[selected_scan]['file_path'])
                    # Desactivar la interfaz de carga
                    st.session_state.show_load_interface = False
            with col2:
                if st.button("‚ùå Cancelar"):
                    # Desactivar la interfaz de carga
                    st.session_state.show_load_interface = False
                    st.rerun()
                
        except Exception as e:
            st.error(f"‚ùå Error mostrando escaneos: {e}")
    
    def _load_scan_data(self, file_path: str):
        """Carga los datos de un escaneo"""
        try:
            logging.info(f"üìÇ Cargando escaneo desde: {file_path}")
            logging.info(f"üîç _load_scan_data llamado con archivo: {file_path}")
            scan_data = self.scan_data_manager.load_scan_data(file_path)
            
            # Actualizar estado de sesi√≥n
            pairs_data = scan_data.get('pairs_data', [])
            logging.info(f"üìä Datos cargados: {len(pairs_data)} pares")
            
            # Establecer datos en session_state
            st.session_state.duplicados = pairs_data
            st.session_state.last_scan_path = scan_data.get('metadata', {}).get('scan_path', '')
            
            # Establecer la lista en el pairs_manager
            self.pairs_manager.set_pairs_list(pairs_data)
            logging.info(f"üîÑ Lista establecida en pairs_manager: {len(pairs_data)} pares")
            
            # Actualizar contadores
            settings.set_total_pairs(len(pairs_data))
            settings.set_pairs_deleted(0)
            logging.info(f"üìà Contadores actualizados: total={len(pairs_data)}")
            
            # Debug: verificar que los datos se establecieron correctamente
            logging.info(f"üîç Despu√©s de cargar - st.session_state.duplicados: {len(st.session_state.duplicados) if st.session_state.duplicados else 0}")
            logging.info(f"üîç Despu√©s de cargar - pairs_manager tiene: {len(self.pairs_manager.get_pairs_list()) if hasattr(self.pairs_manager, 'get_pairs_list') else 'N/A'}")
            
            # Verificar que los datos se cargaron correctamente
            if len(pairs_data) > 0:
                st.success(f"‚úÖ Escaneo cargado exitosamente: {len(pairs_data)} pares")
                st.info("üîÑ Los datos se han cargado correctamente.")
                
                # Marcar que se ha cargado un escaneo
                st.session_state.scan_loaded = True
                
                # Mostrar los datos inmediatamente
                self._render_loaded_data(pairs_data)
            else:
                st.warning("‚ö†Ô∏è El archivo de escaneo est√° vac√≠o")
            
        except Exception as e:
            st.error(f"‚ùå Error cargando escaneo: {e}")
            logging.error(f"‚ùå Error cargando escaneo: {e}")
    
    def _render_loaded_data(self, pairs_data):
        """Renderiza los datos cargados inmediatamente"""
        st.subheader("üìä Datos Cargados")
        
        # M√©tricas
        total_duplicados = len(pairs_data)
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("üîç Duplicados Encontrados", total_duplicados)
        with col2:
            st.metric("üìÅ Total Pel√≠culas", total_duplicados * 2)
        with col3:
            st.metric("üíæ Espacio Ahorrable", "Calculando...")
        
        # Mostrar algunos ejemplos
        st.subheader("üîç Ejemplos de Duplicados")
        for i, duplicado in enumerate(pairs_data[:5]):  # Mostrar solo los primeros 5
            with st.expander(f"Par {i+1}: {duplicado.get('Peli 1', 'N/A')}", expanded=False):
                col1, col2 = st.columns(2)
                with col1:
                    st.write(f"**Archivo 1:** {duplicado.get('Peli 1', 'N/A')}")
                    st.write(f"**Ruta 1:** {duplicado.get('Ruta 1', 'N/A')}")
                    st.write(f"**Tama√±o 1:** {duplicado.get('Tama√±o 1 (GB)', 'N/A')} GB")
                    # Mostrar informaci√≥n de carpeta
                    self._render_folder_info_for_loaded_data(duplicado, 1)
                with col2:
                    st.write(f"**Archivo 2:** {duplicado.get('Peli 2', 'N/A')}")
                    st.write(f"**Ruta 2:** {duplicado.get('Ruta 2', 'N/A')}")
                    st.write(f"**Tama√±o 2:** {duplicado.get('Tama√±o 2 (GB)', 'N/A')} GB")
                    # Mostrar informaci√≥n de carpeta
                    self._render_folder_info_for_loaded_data(duplicado, 2)
        
        if len(pairs_data) > 5:
            st.info(f"üìã Mostrando 5 de {len(pairs_data)} duplicados. Usa la navegaci√≥n para ver m√°s.")
    
    def _render_folder_info_for_loaded_data(self, duplicado: Dict[str, Any], video_num: int):
        """Renderiza la informaci√≥n de carpeta para datos cargados"""
        try:
            # Obtener rutas de ambos archivos
            ruta1 = duplicado.get('Ruta 1', '')
            ruta2 = duplicado.get('Ruta 2', '')
            
            if not ruta1 or not ruta2:
                return
            
            # Extraer carpetas de las rutas
            from pathlib import Path
            carpeta1 = Path(ruta1).parent.name
            carpeta2 = Path(ruta2).parent.name
            
            # Mostrar informaci√≥n de carpeta
            if video_num == 1:
                st.write(f"üìÅ **Carpeta:** `{carpeta1}`")
            else:
                st.write(f"üìÅ **Carpeta:** `{carpeta2}`")
            
            # Comparar carpetas (solo mostrar una vez, en el primer video)
            if video_num == 1:
                if carpeta1 != carpeta2:
                    st.warning("‚ö†Ô∏è **Carpetas diferentes**")
                    st.info(f"üìÇ Izquierda: `{carpeta1}` | Derecha: `{carpeta2}`")
                else:
                    st.info("üëÅÔ∏è **Ojo que est√°n en la misma carpeta**")
                    st.info(f"üìÇ Ambas en: `{carpeta1}`")
                    
        except Exception as e:
            logging.error(f"Error en comparaci√≥n de carpetas para datos cargados: {e}")
    
    def _show_saved_scans(self):
        """Muestra la lista de escaneos guardados"""
        try:
            scans = self.scan_data_manager.get_available_scans()
            
            if not scans:
                st.info("üìã No hay escaneos guardados")
                return
            
            st.subheader("üìã Escaneos Guardados")
            
            for i, scan in enumerate(scans):
                with st.expander(f"üìÅ {scan['filename']}", expanded=False):
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.write(f"**Ruta:** {scan['scan_path']}")
                        st.write(f"**Fecha:** {scan['scan_date']}")
                    
                    with col2:
                        st.write(f"**Pares:** {scan['total_pairs']}")
                        st.write(f"**Archivo:** {scan['filename']}")
                    
                    with col3:
                        if st.button(f"üìÇ Cargar", key=f"load_{i}"):
                            logging.info(f"üîç Bot√≥n Cargar presionado para escaneo {i}: {scan['filename']}")
                            # Usar session_state para pasar el archivo a cargar
                            st.session_state.load_from_list_file = scan['file_path']
                            st.session_state.load_from_list_filename = scan['filename']
                            logging.info(f"üìù Archivo guardado en session_state: {scan['file_path']}")
                            st.rerun()
                        
                        if st.button(f"üóëÔ∏è Eliminar", key=f"delete_{i}"):
                            if self.scan_data_manager.delete_scan_data(scan['file_path']):
                                st.success("‚úÖ Escaneo eliminado")
                                st.rerun()
                            else:
                                st.error("‚ùå Error eliminando escaneo")
                
        except Exception as e:
            st.error(f"‚ùå Error mostrando escaneos: {e}")
    
    def _calculate_file_hash(self, file_path: str) -> Optional[str]:
        """Calcula el hash MD5 de un archivo con indicador de progreso"""
        try:
            # Normalizar la ruta para rutas UNC
            normalized_path = os.path.normpath(file_path)
            
            # Para rutas UNC, intentar acceso directo sin verificar existencia previa
            if file_path.startswith('\\\\'):
                logging.info(f"üîó Calculando hash de ruta UNC: {file_path}")
                try:
                    hash_md5 = hashlib.md5()
                    bytes_read = 0
                    chunk_size = 8192
                    
                    # Obtener tama√±o del archivo para mostrar progreso
                    try:
                        file_size = os.path.getsize(normalized_path)
                        logging.info(f"üìä Tama√±o del archivo: {file_size / (1024*1024):.1f} MB")
                    except:
                        file_size = 0
                    
                    with open(normalized_path, "rb") as f:
                        while True:
                            chunk = f.read(chunk_size)
                            if not chunk:
                                break
                            hash_md5.update(chunk)
                            bytes_read += len(chunk)
                            
                            # Mostrar progreso cada 10MB
                            if file_size > 0 and bytes_read % (10 * 1024 * 1024) == 0:
                                progress = (bytes_read / file_size) * 100
                                logging.info(f"üîÑ Progreso hash: {progress:.1f}% ({bytes_read / (1024*1024):.1f}MB/{file_size / (1024*1024):.1f}MB)")
                    
                    logging.info(f"‚úÖ Hash calculado: {hash_md5.hexdigest()[:16]}...")
                    return hash_md5.hexdigest()
                except (OSError, IOError) as e:
                    logging.warning(f"‚ö†Ô∏è No se puede acceder a ruta UNC {file_path}: {e}")
                    return None
            else:
                # Para rutas locales, verificar existencia
                if not os.path.exists(normalized_path):
                    st.warning(f"‚ö†Ô∏è Archivo no encontrado: {normalized_path}")
                    return None
                
                # Verificar que es un archivo (no directorio)
                if not os.path.isfile(normalized_path):
                    st.warning(f"‚ö†Ô∏è No es un archivo: {normalized_path}")
                    return None
                
                hash_md5 = hashlib.md5()
                bytes_read = 0
                chunk_size = 8192
                
                # Obtener tama√±o del archivo para mostrar progreso
                try:
                    file_size = os.path.getsize(normalized_path)
                    if file_size > 50 * 1024 * 1024:  # Solo mostrar progreso para archivos > 50MB
                        logging.info(f"üìä Calculando hash de archivo local: {file_size / (1024*1024):.1f} MB")
                except:
                    file_size = 0
                
                # Usar try/except para manejar errores de acceso
                try:
                    with open(normalized_path, "rb") as f:
                        while True:
                            chunk = f.read(chunk_size)
                            if not chunk:
                                break
                            hash_md5.update(chunk)
                            bytes_read += len(chunk)
                            
                            # Mostrar progreso cada 10MB para archivos grandes
                            if file_size > 50 * 1024 * 1024 and bytes_read % (10 * 1024 * 1024) == 0:
                                progress = (bytes_read / file_size) * 100
                                logging.info(f"üîÑ Progreso hash: {progress:.1f}% ({bytes_read / (1024*1024):.1f}MB/{file_size / (1024*1024):.1f}MB)")
                    
                    return hash_md5.hexdigest()
                except (OSError, IOError) as e:
                    st.warning(f"‚ö†Ô∏è Error accediendo al archivo: {e}")
                    return None
                
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Error calculando hash: {e}")
            return None
    
    def _get_file_info(self, file_path: str) -> Optional[Dict]:
        """Obtiene informaci√≥n b√°sica del archivo (tama√±o y fecha)"""
        try:
            normalized_path = os.path.normpath(file_path)
            
            if not os.path.exists(normalized_path):
                return None
            
            stat = os.stat(normalized_path)
            return {
                'size': stat.st_size,
                'mtime': stat.st_mtime,
                'ctime': stat.st_ctime  # Fecha de creaci√≥n
            }
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Error obteniendo info del archivo: {e}")
            return None
    
    def _format_creation_date(self, file_path: str) -> str:
        """Formatea la fecha de creaci√≥n del archivo"""
        try:
            file_info = self._get_file_info(file_path)
            if file_info and 'ctime' in file_info:
                import datetime
                creation_time = datetime.datetime.fromtimestamp(file_info['ctime'])
                return creation_time.strftime("%Y-%m-%d %H:%M:%S")
            return "N/A"
        except Exception:
            return "N/A"
    
    def _compare_creation_dates(self, file_path1: str, file_path2: str) -> Dict[str, Any]:
        """Compara las fechas de creaci√≥n de dos archivos"""
        try:
            info1 = self._get_file_info(file_path1)
            info2 = self._get_file_info(file_path2)
            
            if not info1 or not info2 or 'ctime' not in info1 or 'ctime' not in info2:
                return {'newer': None, 'difference': None}
            
            ctime1 = info1['ctime']
            ctime2 = info2['ctime']
            
            if ctime1 > ctime2:
                newer = 1
                difference = ctime1 - ctime2
            elif ctime2 > ctime1:
                newer = 2
                difference = ctime2 - ctime1
            else:
                newer = None
                difference = 0
            
            return {
                'newer': newer,
                'difference': difference
            }
        except Exception:
            return {'newer': None, 'difference': None}
    
    def _render_creation_date_comparison(self, file_path1: str, file_path2: str):
        """Renderiza la comparaci√≥n de fechas de creaci√≥n"""
        try:
            comparison = self._compare_creation_dates(file_path1, file_path2)
            
            if comparison['newer'] is None:
                return
            
            import datetime
            
            # Calcular diferencia en formato legible
            if comparison['difference']:
                diff_seconds = comparison['difference']
                if diff_seconds < 60:
                    diff_text = f"{int(diff_seconds)} segundos"
                elif diff_seconds < 3600:
                    diff_text = f"{int(diff_seconds/60)} minutos"
                elif diff_seconds < 86400:
                    diff_text = f"{int(diff_seconds/3600)} horas"
                else:
                    diff_text = f"{int(diff_seconds/86400)} d√≠as"
            else:
                diff_text = "mismo momento"
            
            # Mostrar resultado de la comparaci√≥n
            st.markdown("---")
            st.subheader("üìÖ Comparaci√≥n de Fechas de Creaci√≥n")
            
            if comparison['newer'] == 1:
                st.success(f"üÜï **Pel√≠cula 1 es m√°s reciente** (por {diff_text})")
                st.info("üí° La Pel√≠cula 1 fue creada m√°s tarde, probablemente es la versi√≥n m√°s actualizada")
            elif comparison['newer'] == 2:
                st.success(f"üÜï **Pel√≠cula 2 es m√°s reciente** (por {diff_text})")
                st.info("üí° La Pel√≠cula 2 fue creada m√°s tarde, probablemente es la versi√≥n m√°s actualizada")
            else:
                st.info("üìÖ **Ambas pel√≠culas fueron creadas al mismo tiempo**")
                
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Error comparando fechas: {e}")
    
    def _show_edition_creator(self, file_path: str, movie_title: str, key: str):
        """Muestra el creador de ediciones para Plex"""
        st.markdown("---")
        st.subheader("üé¨ Crear Edici√≥n en Plex")
        
        # Mostrar informaci√≥n del archivo
        st.write(f"**Archivo:** {os.path.basename(file_path)}")
        st.write(f"**Pel√≠cula:** {movie_title}")
        
        # Opciones de edici√≥n predefinidas
        edition_options = [
            "Edici√≥n del Director",
            "Edici√≥n Especial",
            "Edici√≥n Extendida", 
            "Edici√≥n Teatral",
            "Edici√≥n 20 Aniversario",
            "Edici√≥n 4K",
            "Edici√≥n Remasterizada",
            "Edici√≥n Sin Cortes",
            "Edici√≥n Unrated",
            "Edici√≥n Especial 25 Aniversario"
        ]
        
        # Selector de edici√≥n
        selected_edition = st.selectbox(
            "Selecciona el tipo de edici√≥n:",
            ["Personalizada"] + edition_options,
            key=f"edition_type_{key}"
        )
        
        # Campo para edici√≥n personalizada
        if selected_edition == "Personalizada":
            custom_edition = st.text_input(
                "Nombre de la edici√≥n:",
                placeholder="Ej: Edici√≥n del Director, Versi√≥n Extendida...",
                key=f"custom_edition_{key}"
            )
            edition_name = custom_edition
        else:
            edition_name = selected_edition
        
        # Bot√≥n para aplicar
        if st.button("‚úÖ Aplicar Edici√≥n", key=f"apply_edition_{key}"):
            if edition_name:
                self._apply_plex_edition(file_path, edition_name)
            else:
                st.error("‚ùå Debes especificar un nombre para la edici√≥n")
    
    def _apply_plex_edition(self, file_path: str, edition_name: str):
        """Aplica la edici√≥n renombrando el archivo seg√∫n las convenciones de Plex"""
        try:
            # Obtener directorio y nombre base
            directory = os.path.dirname(file_path)
            filename = os.path.basename(file_path)
            name, ext = os.path.splitext(filename)
            
            # Crear nuevo nombre con formato Plex: {edition-Nombre de la Edici√≥n}
            new_filename = f"{name} {{edition-{edition_name}}}{ext}"
            new_path = os.path.join(directory, new_filename)
            
            # Renombrar archivo
            os.rename(file_path, new_path)
            
            st.success(f"‚úÖ Archivo renombrado exitosamente!")
            st.info(f"üìÅ **Nuevo nombre:** {new_filename}")
            st.info("üí° **Siguiente paso:** Ejecuta un escaneo en Plex para que detecte la nueva edici√≥n")
            
            # Mostrar instrucciones
            st.markdown("### üìã Instrucciones para Plex:")
            st.markdown("""
            1. **Abre Plex Media Server**
            2. **Ve a la biblioteca** donde est√° la pel√≠cula
            3. **Haz clic en "M√°s" ‚Üí "Escanear archivos de biblioteca"**
            4. **Espera** a que termine el escaneo
            5. **Verifica** que aparezca la nueva edici√≥n
            """)
            
        except Exception as e:
            st.error(f"‚ùå Error aplicando edici√≥n: {e}")
    
    def _render_telegram_tab(self):
        """Renderiza la pesta√±a de configuraci√≥n de Telegram"""
        st.subheader("üì± Configuraci√≥n de Telegram")
        
        # Verificar si Telegram est√° configurado
        telegram_service = self.telegram_service
        is_configured = telegram_service.is_configured()
        
        if is_configured:
            st.success("‚úÖ Telegram configurado correctamente")
            
            # Probar conexi√≥n
            if st.button("üîç Probar Conexi√≥n", key="telegram_test_connection"):
                with st.spinner("Probando conexi√≥n..."):
                    if telegram_service.test_connection():
                        st.success("‚úÖ Conexi√≥n exitosa con Telegram")
                    else:
                        st.error("‚ùå Error de conexi√≥n con Telegram")
        else:
            st.warning("‚ö†Ô∏è Telegram no est√° configurado")
            st.info("üí° Configura el bot token y channel ID en la configuraci√≥n")
        
        # Configuraci√≥n b√°sica
        st.subheader("‚öôÔ∏è Configuraci√≥n")
        
        # Bot Token
        bot_token = st.text_input(
            "Bot Token",
            value=settings.get_telegram_bot_token() or "",
            type="password",
            help="Token del bot de Telegram"
        )
        
        # Channel ID
        channel_id = st.text_input(
            "Channel ID",
            value=settings.get_telegram_channel_id() or "",
            help="ID del canal de Telegram"
        )
        
        # Guardar configuraci√≥n
        if st.button("üíæ Guardar Configuraci√≥n", key="save_telegram_config"):
            try:
                settings.set_telegram_bot_token(bot_token)
                settings.set_telegram_channel_id(channel_id)
                st.success("‚úÖ Configuraci√≥n guardada")
                st.rerun()
            except Exception as e:
                st.error(f"‚ùå Error guardando configuraci√≥n: {e}")
        
        # Funcionalidades de Telegram
        if is_configured:
            st.subheader("üöÄ Funcionalidades")
            
            # Enviar mensaje de prueba
            if st.button("üì§ Enviar Mensaje de Prueba", key="telegram_test_message"):
                with st.spinner("Enviando mensaje..."):
                    try:
                        result = telegram_service.send_message("üß™ Mensaje de prueba desde la aplicaci√≥n")
                        if result:
                            st.success("‚úÖ Mensaje enviado correctamente")
                        else:
                            st.error("‚ùå Error enviando mensaje")
                    except Exception as e:
                        st.error(f"‚ùå Error: {e}")
            
            # Enviar duplicados actuales
            if hasattr(st.session_state, 'duplicados') and st.session_state.duplicados:
                if st.button("üìä Enviar Reporte de Duplicados", key="telegram_send_report"):
                    with st.spinner("Enviando reporte..."):
                        try:
                            # Crear reporte
                            total_duplicados = len(st.session_state.duplicados)
                            mensaje = f"üîç **Reporte de Duplicados**\n\n"
                            mensaje += f"üìä Total de duplicados encontrados: {total_duplicados}\n"
                            mensaje += f"üìÅ Total de pel√≠culas: {total_duplicados * 2}\n\n"
                            mensaje += "üìã **Ejemplos de duplicados:**\n"
                            
                            # Agregar algunos ejemplos
                            for i, duplicado in enumerate(st.session_state.duplicados[:3]):
                                mensaje += f"{i+1}. {duplicado.get('Peli 1', 'N/A')}\n"
                            
                            if total_duplicados > 3:
                                mensaje += f"... y {total_duplicados - 3} m√°s\n"
                            
                            result = telegram_service.send_message(mensaje)
                            if result:
                                st.success("‚úÖ Reporte enviado correctamente")
                            else:
                                st.error("‚ùå Error enviando reporte")
                        except Exception as e:
                            st.error(f"‚ùå Error: {e}")
            else:
                st.info("üí° No hay duplicados para enviar. Escanea una carpeta primero.")
    
    def _render_telegram_interface(self):
        """Renderiza la interfaz principal de Telegram"""
        st.header("üì± Interfaz de Telegram")
        
        # Bot√≥n para volver
        if st.button("‚Üê Volver al Inicio"):
            st.session_state.show_telegram_interface = False
            st.rerun()
        
        st.markdown("---")
        
        # Mostrar solo la funcionalidad de subida de videos
        self._render_telegram_upload_interface()
    
    def _render_telegram_upload_interface(self):
        """Renderiza la interfaz de subida de videos de Telegram"""
        # Verificar si Telegram est√° configurado
        if not self.telegram_service.is_configured():
            st.warning("‚ö†Ô∏è Telegram no est√° configurado")
            st.info("üí° Configura el bot token y channel ID en la barra lateral")
            return
        
        st.success("‚úÖ Telegram configurado correctamente")
        
        # Funcionalidad: Subir videos desde carpeta
        st.subheader("üìÅ Subir Videos desde Carpeta")
        
        # Seleccionar carpeta de videos
        folder_path = st.text_input(
            "Ruta de la carpeta:",
            value=st.session_state.get('telegram_folder_path', ''),
            help="Introduce la ruta de la carpeta que contiene los videos que quieres subir"
        )
        
        if folder_path:
            st.session_state.telegram_folder_path = folder_path
            
            if st.button("üîç Escanear Carpeta", type="primary"):
                with st.spinner("Escaneando carpeta..."):
                    videos = self._scan_telegram_folder(folder_path)
                    if videos:
                        st.session_state.telegram_videos = videos
                        st.session_state.telegram_selected_videos = []
                        st.success(f"‚úÖ Encontrados {len(videos)} videos")
                    else:
                        st.warning("‚ö†Ô∏è No se encontraron videos en la carpeta")
        
        # Mostrar videos si est√°n cargados
        if 'telegram_videos' in st.session_state and st.session_state.telegram_videos:
            st.markdown("---")
            st.subheader("üé¨ Videos Encontrados")
            
            # Opciones de selecci√≥n
            col1, col2, col3 = st.columns(3)
            with col1:
                if st.button("‚úÖ Seleccionar Todos"):
                    st.session_state.telegram_selected_videos = list(range(len(st.session_state.telegram_videos)))
                    st.rerun()
            with col2:
                if st.button("‚ùå Deseleccionar Todos"):
                    st.session_state.telegram_selected_videos = []
                    st.rerun()
            with col3:
                if st.button("üîÑ Actualizar Lista"):
                    videos = self._scan_telegram_folder(st.session_state.telegram_folder_path)
                    if videos:
                        st.session_state.telegram_videos = videos
                        st.rerun()
            
            # Lista de videos con checkboxes
            if 'telegram_selected_videos' not in st.session_state:
                st.session_state.telegram_selected_videos = []
            
            for i, video in enumerate(st.session_state.telegram_videos):
                col1, col2, col3, col4 = st.columns([1, 3, 1, 1])
                
                with col1:
                    selected = st.checkbox(
                        f"Seleccionar {video['name']}",
                        value=i in st.session_state.telegram_selected_videos,
                        key=f"telegram_video_{i}",
                        label_visibility="collapsed"
                    )
                    if selected and i not in st.session_state.telegram_selected_videos:
                        st.session_state.telegram_selected_videos.append(i)
                    elif not selected and i in st.session_state.telegram_selected_videos:
                        st.session_state.telegram_selected_videos.remove(i)
                
                with col2:
                    st.write(f"**{video['name']}**")
                    st.caption(f"üìÅ {video['path']}")
                
                with col3:
                    st.write(f"{video['size']:.2f} MB")
                
                with col4:
                    if video['size'] > 1500:  # 1.5GB
                        st.warning("‚ö†Ô∏è Grande")
                    else:
                        st.success("‚úÖ OK")
                
                st.markdown("---")
            
            # Bot√≥n de subida
            if st.session_state.telegram_selected_videos:
                st.subheader("üì§ Subir Videos Seleccionados")
                st.info(f"üìä {len(st.session_state.telegram_selected_videos)} videos seleccionados")
                
                if st.button("üöÄ Subir a Telegram", type="primary", use_container_width=True):
                    self._upload_selected_videos_to_telegram()
            else:
                st.info("üí° Selecciona videos para subir")
    
    def run(self):
        """Ejecuta la aplicaci√≥n completa"""
        # Verificar si hay un archivo pendiente de cargar desde la lista
        if hasattr(st.session_state, 'load_from_list_file') and st.session_state.load_from_list_file:
            logging.info(f"üìÇ Cargando escaneo desde lista: {st.session_state.load_from_list_file}")
            self._load_scan_data(st.session_state.load_from_list_file)
            # Limpiar el archivo pendiente
            del st.session_state.load_from_list_file
            if hasattr(st.session_state, 'load_from_list_filename'):
                del st.session_state.load_from_list_filename
        
        self.render_header()
        self.render_sidebar()
        
        # Manejar interfaces especiales
        if getattr(st.session_state, 'show_scan_interface', False):
            self.render_scan_section()
            self.render_results()
        elif getattr(st.session_state, 'show_telegram_interface', False):
            self._render_telegram_interface()
        elif getattr(st.session_state, 'show_imdb_interface', False):
            self._render_imdb_interface()
        else:
            # Mostrar interfaz principal por defecto
            self.render_scan_section()
            self.render_results()
    
    def _scan_telegram_folder(self, folder_path: str) -> list:
        """Escanea una carpeta en busca de videos para Telegram usando TelegramManager"""
        try:
            # Usar el m√©todo del TelegramManager para escanear
            videos = []
            folder = Path(folder_path)
            
            if not folder.exists():
                return []
            
            # Extensiones de video soportadas
            video_extensions = {'.mp4', '.avi', '.mkv', '.mov', '.wmv', '.flv', '.webm', '.m4v'}
            
            # Buscar archivos de video
            for file_path in folder.rglob('*'):
                if file_path.is_file() and file_path.suffix.lower() in video_extensions:
                    try:
                        # Obtener informaci√≥n del archivo
                        file_size = file_path.stat().st_size
                        size_mb = file_size / (1024 * 1024)
                        
                        # Crear entrada de video
                        video_info = {
                            'name': file_path.name,
                            'path': str(file_path),
                            'size': size_mb,
                            'extension': file_path.suffix.lower()
                        }
                        
                        videos.append(video_info)
                        
                    except Exception as e:
                        self.logger.warning(f"Error procesando archivo {file_path}: {e}")
                        continue
            
            # Ordenar por nombre
            videos.sort(key=lambda x: x['name'])
            
            return videos
            
        except Exception as e:
            self.logger.error(f"Error escaneando carpeta {folder_path}: {e}")
            return []
    
    def _upload_selected_videos_to_telegram(self):
        """Sube los videos seleccionados a Telegram usando el mismo sistema que el test"""
        if not st.session_state.telegram_selected_videos:
            st.warning("‚ö†Ô∏è No hay videos seleccionados")
            return
        
        selected_videos = [st.session_state.telegram_videos[i] for i in st.session_state.telegram_selected_videos]
        
        # Filtrar videos que son demasiado grandes
        valid_videos = []
        oversized_videos = []
        
        for video in selected_videos:
            if video['size'] > 1500:  # 1.5GB l√≠mite de Telethon
                oversized_videos.append(video)
            else:
                valid_videos.append(video)
        
        if oversized_videos:
            st.warning(f"‚ö†Ô∏è {len(oversized_videos)} videos son demasiado grandes (>1.5GB) y se omitir√°n:")
            for video in oversized_videos:
                st.write(f"  ‚Ä¢ {video['name']} ({video['size']:.2f} MB)")
        
        if not valid_videos:
            st.error("‚ùå No hay videos v√°lidos para subir (todos son demasiado grandes)")
            return
        
        # Configurar callback de progreso
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        def progress_callback(message: str, progress: float):
            progress_bar.progress(progress / 100)
            status_text.text(f"üì§ {message}")
        
        st.info(f"üì§ Subiendo {len(valid_videos)} videos...")
        
        # Usar TelegramUploader (mismo sistema que el test que funcion√≥)
        results = self.telegram_uploader.upload_multiple_videos(
            videos=valid_videos,
            progress_callback=progress_callback
        )
        
        # Mostrar resultados individuales
        for i, (video, success) in enumerate(zip(valid_videos, results)):
            if success:
                st.success(f"‚úÖ {video['name']} subido correctamente")
            else:
                st.error(f"‚ùå {video['name']} fall√≥")
        
        # Mostrar resultados finales
        success_count = sum(results)
        error_count = len(results) - success_count
        
        if success_count > 0:
            st.success(f"‚úÖ {success_count} videos subidos correctamente")
        if error_count > 0:
            st.error(f"‚ùå {error_count} videos fallaron")
        
        # Limpiar UI de progreso
        progress_bar.empty()
        status_text.empty()
    
    def _render_imdb_tab(self):
        """Renderiza la pesta√±a de configuraci√≥n de IMDB"""
        st.subheader("üé≠ Configuraci√≥n de IMDB")
        
        # Verificar si IMDB est√° configurado
        imdb_service = self.imdb_service
        is_configured = imdb_service.is_configured()
        
        if is_configured:
            st.success("‚úÖ IMDB configurado correctamente")
            
            # Probar conexi√≥n
            if st.button("üîç Probar Conexi√≥n", key="imdb_test_connection"):
                with st.spinner("Probando conexi√≥n..."):
                    if imdb_service.test_connection():
                        st.success("‚úÖ Conexi√≥n exitosa con IMDB")
                    else:
                        st.error("‚ùå Error de conexi√≥n con IMDB")
        else:
            st.warning("‚ö†Ô∏è IMDB no est√° configurado")
            st.info("üí° Configura las credenciales de IMDB")
        
        # Configuraci√≥n b√°sica (placeholder para futuras funcionalidades)
        st.subheader("‚öôÔ∏è Configuraci√≥n")
        
        # API Key de IMDB
        api_key = st.text_input(
            "IMDB API Key",
            value="",
            type="password",
            help="Clave API de IMDB"
        )
        
        # Guardar configuraci√≥n
        if st.button("üíæ Guardar Configuraci√≥n", key="save_imdb_config"):
            try:
                # TODO: Implementar guardado de configuraci√≥n de IMDB
                st.success("‚úÖ Configuraci√≥n guardada")
                st.rerun()
            except Exception as e:
                st.error(f"‚ùå Error guardando configuraci√≥n: {e}")
        
        # Funcionalidades de IMDB
        if is_configured:
            st.subheader("üöÄ Funcionalidades")
            
            # Enviar mensaje de prueba
            if st.button("üì§ Enviar Mensaje de Prueba", key="imdb_test_message"):
                with st.spinner("Enviando mensaje..."):
                    try:
                        result = imdb_service.send_message("üß™ Mensaje de prueba desde IMDB")
                        if result:
                            st.success("‚úÖ Mensaje enviado correctamente")
                        else:
                            st.error("‚ùå Error enviando mensaje")
                    except Exception as e:
                        st.error(f"‚ùå Error: {e}")
            
            # Enviar duplicados actuales
            if hasattr(st.session_state, 'duplicados') and st.session_state.duplicados:
                if st.button("üìä Enviar Reporte de Duplicados", key="imdb_send_report"):
                    with st.spinner("Enviando reporte..."):
                        try:
                            # Crear reporte
                            total_duplicados = len(st.session_state.duplicados)
                            mensaje = f"üîç **Reporte de Duplicados**\n\n"
                            mensaje += f"üìä Total de duplicados encontrados: {total_duplicados}\n"
                            mensaje += f"üìÅ Total de pel√≠culas: {total_duplicados * 2}\n\n"
                            mensaje += "üìã **Ejemplos de duplicados:**\n"
                            
                            # Agregar algunos ejemplos
                            for i, duplicado in enumerate(st.session_state.duplicados[:3]):
                                mensaje += f"{i+1}. {duplicado.get('Peli 1', 'N/A')}\n"
                            
                            if total_duplicados > 3:
                                mensaje += f"... y {total_duplicados - 3} m√°s\n"
                            
                            result = imdb_service.send_message(mensaje)
                            if result:
                                st.success("‚úÖ Reporte enviado correctamente")
                            else:
                                st.error("‚ùå Error enviando reporte")
                        except Exception as e:
                            st.error(f"‚ùå Error: {e}")
            else:
                st.info("üí° No hay duplicados para enviar. Escanea una carpeta primero.")
    
    def _render_imdb_interface(self):
        """Renderiza la interfaz principal de IMDB"""
        st.header("üé≠ Interfaz de IMDB")
        
        # Bot√≥n para volver
        if st.button("‚Üê Volver al Inicio"):
            st.session_state.show_imdb_interface = False
            st.rerun()
        
        st.markdown("---")
        
        # Verificar configuraci√≥n
        imdb_service = self.imdb_service
        is_configured = imdb_service.is_configured()
        
        if not is_configured:
            st.error("‚ùå IMDB no est√° configurado correctamente")
            st.info("üí° Necesitas configurar Telegram y Plex para usar IMDB")
            return
        
        st.success("‚úÖ IMDB configurado correctamente")
        
        # Mostrar capacidades
        capabilities = imdb_service.get_upload_capabilities()
        st.subheader("üîß Capacidades Disponibles")
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("üé¨ B√∫squeda de Pel√≠culas", "‚úÖ Activa" if capabilities.get('movie_search') else "‚ùå Inactiva")
        with col2:
            st.metric("üì∫ Integraci√≥n Plex", "‚úÖ Activa" if capabilities.get('plex_integration') else "‚ùå Inactiva")
        with col3:
            st.metric("üåê Integraci√≥n IMDB", "‚úÖ Activa" if capabilities.get('imdb_integration') else "‚ùå Inactiva")
        
        st.markdown("---")
        
        # Secci√≥n de subida de pel√≠culas
        st.subheader("üì§ Subir Pel√≠culas con Informaci√≥n IMDB")
        
        # Opciones de subida
        upload_method = st.radio(
            "M√©todo de subida:",
            ["üìÅ Desde Carpeta", "üìé Archivos Individuales"],
            help="Selecciona c√≥mo quieres subir las pel√≠culas"
        )
        
        if upload_method == "üìÅ Desde Carpeta":
            # Funcionalidad: Subir videos desde carpeta (igual que Telegram)
            st.subheader("üìÅ Subir Videos desde Carpeta")
            
            # Seleccionar carpeta de videos
            folder_path = st.text_input(
                "Ruta de la carpeta:",
                value=st.session_state.get('imdb_folder_path', ''),
                help="Introduce la ruta de la carpeta que contiene los videos que quieres subir con informaci√≥n IMDB"
            )
            
            if folder_path:
                st.session_state.imdb_folder_path = folder_path
                
                if st.button("üîç Escanear Carpeta", type="primary"):
                    with st.spinner("Escaneando carpeta..."):
                        videos = self._scan_imdb_folder(folder_path)
                        if videos:
                            st.session_state.imdb_videos = videos
                            st.session_state.imdb_selected_videos = []
                            st.success(f"‚úÖ Encontrados {len(videos)} videos")
                        else:
                            st.warning("‚ö†Ô∏è No se encontraron videos en la carpeta")
            
            # Mostrar videos si est√°n cargados (EXACTAMENTE como en Telegram)
            if 'imdb_videos' in st.session_state and st.session_state.imdb_videos:
                st.markdown("---")
                st.subheader("üé¨ Videos Encontrados")
                
                # Opciones de selecci√≥n (igual que Telegram)
                col1, col2, col3 = st.columns(3)
                with col1:
                    if st.button("‚úÖ Seleccionar Todos"):
                        st.session_state.imdb_selected_videos = list(range(len(st.session_state.imdb_videos)))
                        st.rerun()
                with col2:
                    if st.button("‚ùå Deseleccionar Todos"):
                        st.session_state.imdb_selected_videos = []
                        st.rerun()
                with col3:
                    if st.button("üîÑ Actualizar Lista"):
                        videos = self._scan_imdb_folder(st.session_state.imdb_folder_path)
                        if videos:
                            st.session_state.imdb_videos = videos
                            st.rerun()
                
                # Lista de videos con checkboxes (igual que Telegram)
                if 'imdb_selected_videos' not in st.session_state:
                    st.session_state.imdb_selected_videos = []
                
                for i, video in enumerate(st.session_state.imdb_videos):
                    col1, col2, col3, col4 = st.columns([1, 3, 1, 1])
                    
                    with col1:
                        selected = st.checkbox(
                            f"Seleccionar {video['name']}",
                            value=i in st.session_state.imdb_selected_videos,
                            key=f"imdb_video_{i}",
                            label_visibility="collapsed"
                        )
                        if selected and i not in st.session_state.imdb_selected_videos:
                            st.session_state.imdb_selected_videos.append(i)
                        elif not selected and i in st.session_state.imdb_selected_videos:
                            st.session_state.imdb_selected_videos.remove(i)
                    
                    with col2:
                        st.write(f"**{video['name']}**")
                        st.caption(f"üìÅ {video['path']}")
                    
                    with col3:
                        st.write(f"{video['size']:.2f} MB")
                    
                    with col4:
                        if video['size'] > 1500:  # 1.5GB
                            st.warning("‚ö†Ô∏è Grande")
                        else:
                            st.success("‚úÖ OK")
                    
                    st.markdown("---")
                
                # Bot√≥n de subida (igual que Telegram pero con info IMDB)
                if st.session_state.imdb_selected_videos:
                    st.subheader("üì§ Subir Videos Seleccionados")
                    st.info(f"üìä {len(st.session_state.imdb_selected_videos)} videos seleccionados")
                    
                    # Opciones adicionales para IMDB
                    col1, col2 = st.columns(2)
                    with col1:
                        use_telethon = st.checkbox("Usar Telethon (recomendado para archivos grandes)", value=True)
                    with col2:
                        send_poster = st.checkbox("Enviar p√≥ster de la pel√≠cula", value=True)
                    
                    if st.button("üöÄ Subir a IMDB con Informaci√≥n", type="primary", use_container_width=True):
                        self._upload_selected_imdb_videos(use_telethon, send_poster)
                else:
                    st.info("üí° Selecciona videos para subir")
        
        else:  # Archivos Individuales
            # Seleccionar archivos
            uploaded_files = st.file_uploader(
                "Selecciona archivos de video",
                type=['mp4', 'mkv', 'avi', 'mov', 'wmv'],
                accept_multiple_files=True,
                help="Selecciona uno o m√°s archivos de video para subir con informaci√≥n de IMDB"
            )
            
            if uploaded_files:
                st.write(f"üìÅ {len(uploaded_files)} archivo(s) seleccionado(s)")
                
                # Mostrar informaci√≥n de archivos (SIN b√∫squedas autom√°ticas)
                for i, file in enumerate(uploaded_files):
                    with st.expander(f"üìπ {file.name}"):
                        st.write(f"**Archivo:** {file.name}")
                        st.write(f"**Tama√±o:** {file.size / (1024*1024):.2f} MB")
                        st.write(f"**Tipo:** {file.type}")
                        
                        # Bot√≥n para buscar informaci√≥n (solo cuando se necesite)
                        if st.button(f"üîç Buscar informaci√≥n IMDB", key=f"search_info_{i}"):
                            with st.spinner(f"Buscando informaci√≥n para {file.name}..."):
                                movie_info = imdb_service.find_movie_info(file.name)
                            
                            if movie_info:
                                st.success("‚úÖ Informaci√≥n encontrada")
                                
                                # Mostrar informaci√≥n b√°sica
                                col1, col2 = st.columns(2)
                                with col1:
                                    st.write(f"**T√≠tulo:** {movie_info.get('title', 'N/A')}")
                                    st.write(f"**A√±o:** {movie_info.get('year', 'N/A')}")
                                    st.write(f"**Rating:** {movie_info.get('imdb_rating', movie_info.get('rating', 'N/A'))}")
                                
                                with col2:
                                    st.write(f"**Director:** {movie_info.get('director', 'N/A')}")
                                    st.write(f"**G√©nero:** {movie_info.get('genre', 'N/A')}")
                                    st.write(f"**Estudio:** {movie_info.get('studio', 'N/A')}")
                                
                                # Mostrar sinopsis
                                if movie_info.get('plot'):
                                    st.write(f"**Sinopsis:** {movie_info['plot']}")
                                
                                # Mostrar p√≥ster si est√° disponible
                                if movie_info.get('poster') and movie_info['poster'] != 'N/A':
                                    st.image(movie_info['poster'], caption="P√≥ster de la pel√≠cula", width=200)
                            else:
                                st.warning("‚ö†Ô∏è No se encontr√≥ informaci√≥n de la pel√≠cula")
                                st.info("üí° Se subir√° solo el archivo sin informaci√≥n adicional")
                
                # Opciones de subida
                st.subheader("‚öôÔ∏è Opciones de Subida")
                
                col1, col2 = st.columns(2)
                with col1:
                    use_telethon = st.checkbox("Usar Telethon (recomendado para archivos grandes)", value=True)
                with col2:
                    send_poster = st.checkbox("Enviar p√≥ster de la pel√≠cula", value=True)
                
                # Bot√≥n de subida
                if st.button("üöÄ Subir Pel√≠culas con Informaci√≥n IMDB", type="primary"):
                    with st.spinner("Subiendo pel√≠culas..."):
                        results = []
                        
                        for file in uploaded_files:
                            # Buscar informaci√≥n de la pel√≠cula solo cuando se va a subir
                            with st.spinner(f"Buscando informaci√≥n para {file.name}..."):
                                movie_info = imdb_service.find_movie_info(file.name)
                                if not movie_info:
                                    movie_info = {'title': file.name}
                            
                            # Simular subida (en producci√≥n aqu√≠ se subir√≠a realmente)
                            result = {
                                'file': file.name,
                                'success': True,
                                'info_found': bool(movie_info.get('title')),
                                'poster_available': bool(movie_info.get('poster'))
                            }
                            results.append(result)
                        
                        # Mostrar resultados
                        st.success("‚úÖ Subida completada")
                        
                        # Crear tabla de resultados
                        import pandas as pd
                        df_results = pd.DataFrame(results)
                        st.dataframe(df_results, use_container_width=True)
                        
                        # Mostrar resumen
                        total_files = len(results)
                        successful = sum(1 for r in results if r['success'])
                        with_info = sum(1 for r in results if r['info_found'])
                        with_poster = sum(1 for r in results if r['poster_available'])
                        
                        st.metric("üìä Resumen", f"{successful}/{total_files} archivos subidos")
                        st.metric("‚ÑπÔ∏è Con informaci√≥n", f"{with_info}/{total_files} archivos")
                        st.metric("üñºÔ∏è Con p√≥ster", f"{with_poster}/{total_files} archivos")
        
        # Secci√≥n de prueba
        st.markdown("---")
        st.subheader("üß™ Pruebas y Diagn√≥stico")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üîç Probar Conexi√≥n IMDB"):
                with st.spinner("Probando conexi√≥n..."):
                    if imdb_service.test_connection():
                        st.success("‚úÖ Conexi√≥n exitosa")
                    else:
                        st.error("‚ùå Error de conexi√≥n")
        
        with col2:
            if st.button("üìä Ver Capacidades"):
                capabilities = imdb_service.get_upload_capabilities()
                st.json(capabilities)
    
    def _scan_imdb_folder(self, folder_path: str) -> list:
        """Escanea una carpeta en busca de videos para IMDB"""
        try:
            videos = []
            folder = Path(folder_path)
            
            if not folder.exists():
                return []
            
            # Extensiones de video soportadas
            video_extensions = {'.mp4', '.avi', '.mkv', '.mov', '.wmv', '.flv', '.webm', '.m4v'}
            
            # Buscar archivos de video
            for file_path in folder.rglob('*'):
                if file_path.is_file() and file_path.suffix.lower() in video_extensions:
                    try:
                        # Obtener informaci√≥n del archivo
                        file_size = file_path.stat().st_size
                        size_mb = file_size / (1024 * 1024)
                        
                        # Crear entrada de video
                        video_info = {
                            'name': file_path.name,
                            'path': str(file_path),
                            'size': size_mb,
                            'extension': file_path.suffix.lower()
                        }
                        
                        videos.append(video_info)
                        
                    except Exception as e:
                        self.logger.warning(f"Error procesando archivo {file_path}: {e}")
                        continue
            
            # Ordenar por nombre
            videos.sort(key=lambda x: x['name'])
            
            return videos
            
        except Exception as e:
            self.logger.error(f"Error escaneando carpeta {folder_path}: {e}")
            return []
    
    def _upload_selected_imdb_videos(self, use_telethon: bool, send_poster: bool):
        """Sube los videos seleccionados con informaci√≥n IMDB"""
        if not st.session_state.imdb_selected_videos:
            st.warning("‚ö†Ô∏è No hay videos seleccionados")
            return
        
        selected_videos = [st.session_state.imdb_videos[i] for i in st.session_state.imdb_selected_videos]
        
        # PASO 1: Buscar informaci√≥n de TODOS los videos primero
        st.subheader("üîç Paso 1: Buscando informaci√≥n de pel√≠culas")
        movie_info_cache = {}
        
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        for i, video in enumerate(selected_videos):
            status_text.text(f"Buscando informaci√≥n para {video['name']} ({i+1}/{len(selected_videos)})")
            
            try:
                # 1. Limpiar nombre del archivo para b√∫squeda
                clean_filename = self._clean_filename_for_search(video['name'])
                st.info(f"üîç Buscando: '{clean_filename}'")
                
                # 2. Buscar primero en IMDB con nombre limpio
                movie_info = self.imdb_service.find_movie_info(clean_filename)
                
                # 3. Si IMDB no encuentra informaci√≥n completa, buscar en Plex
                if not movie_info or not movie_info.get('title') or movie_info['title'] == clean_filename:
                    st.info(f"üîç IMDB no encontr√≥ info completa, buscando en Plex...")
                    
                    # Buscar en Plex usando el m√©todo correcto
                    plex_info = self._search_in_plex_with_extractor(video['name'])
                    if plex_info:
                        st.success(f"‚úÖ Plex: {plex_info.get('title', 'N/A')} ({plex_info.get('year', 'N/A')})")
                        
                        # Intentar buscar informaci√≥n completa en TMDB (espa√±ol) con el t√≠tulo de Plex
                        st.info(f"üîç Buscando informaci√≥n completa en TMDB (espa√±ol) con t√≠tulo de Plex...")
                        tmdb_info = self._search_in_tmdb(plex_info.get('title'), plex_info.get('year'))
                        
                        if tmdb_info:
                            # Combinar Plex + TMDB
                            plex_info.update(tmdb_info)
                            st.success(f"‚úÖ Plex + TMDB: {plex_info.get('title', 'N/A')} ({plex_info.get('year', 'N/A')})")
                        else:
                            # Si TMDB falla, intentar con OMDb
                            st.info(f"üîç TMDB no encontr√≥, intentando con OMDb...")
                            omdb_info = self._search_in_omdb(plex_info.get('title'), plex_info.get('year'))
                            
                            if omdb_info:
                                # Combinar Plex + OMDb
                                plex_info.update(omdb_info)
                                st.success(f"‚úÖ Plex + OMDb: {plex_info.get('title', 'N/A')} ({plex_info.get('year', 'N/A')})")
                            else:
                                # Si OMDb falla con t√≠tulo de Plex, intentar con nombre limpio
                                st.info(f"üîç OMDb no encontr√≥ con t√≠tulo de Plex, intentando con nombre limpio...")
                                omdb_info = self._search_in_omdb(clean_filename)
                                
                                if omdb_info:
                                    # Combinar Plex + OMDb (con nombre limpio)
                                    plex_info.update(omdb_info)
                                    st.success(f"‚úÖ Plex + OMDb (limpio): {plex_info.get('title', 'N/A')} ({plex_info.get('year', 'N/A')})")
                                else:
                                    st.warning(f"‚ö†Ô∏è Ni TMDB ni OMDb encontraron informaci√≥n adicional - Usando solo informaci√≥n de Plex")
                                    # Agregar informaci√≥n b√°sica de Plex para que funcione
                                    plex_info.update({
                                        'plot': f"Pel√≠cula encontrada en Plex: {plex_info.get('title', 'N/A')}",
                                        'summary': f"Pel√≠cula encontrada en Plex: {plex_info.get('title', 'N/A')}",
                                        'poster': 'N/A',
                                        'rating': 'N/A',
                                        'director': 'N/A',
                                        'actors': 'N/A',
                                        'genre': 'N/A'
                                    })
                        
                        # Combinar informaci√≥n de Plex con lo que tengamos de IMDB
                        if movie_info:
                            movie_info.update(plex_info)
                        else:
                            movie_info = plex_info
                    else:
                        st.warning(f"‚ö†Ô∏è Ni IMDB ni Plex encontraron informaci√≥n para {video['name']}")
                
                if not movie_info:
                    movie_info = {'title': video['name']}
                
                movie_info_cache[video['name']] = movie_info
                
                # Mostrar informaci√≥n encontrada
                if movie_info.get('title') and movie_info['title'] != video['name']:
                    source = "IMDB" if movie_info.get('source') == 'imdb' else "Plex"
                    st.success(f"‚úÖ {video['name']} ‚Üí {movie_info.get('title', 'N/A')} ({movie_info.get('year', 'N/A')}) [{source}]")
                else:
                    st.warning(f"‚ö†Ô∏è {video['name']} ‚Üí Sin informaci√≥n adicional")
                
            except Exception as e:
                st.error(f"‚ùå Error buscando {video['name']}: {e}")
                movie_info_cache[video['name']] = {'title': video['name']}
            
            progress_bar.progress((i + 1) / len(selected_videos))
        
        status_text.text("‚úÖ B√∫squeda de informaci√≥n completada")
        st.markdown("---")
        
        # PASO 2: Enviar informaci√≥n y videos en orden correcto
        st.subheader("üì§ Paso 2: Enviando informaci√≥n y videos en orden")
        
        upload_progress = st.progress(0)
        upload_status = st.empty()
        
        for i, video in enumerate(selected_videos):
            upload_status.text(f"Enviando informaci√≥n completa para {video['name']} ({i+1}/{len(selected_videos)})")
            
            try:
                # Usar informaci√≥n ya buscada
                movie_info = movie_info_cache.get(video['name'], {'title': video['name']})
                
                # Enviar informaci√≥n completa en orden: car√°tula + sinopsis + video
                self._send_complete_movie_info_to_telegram(movie_info, video['name'], video['path'])
                
            except Exception as e:
                st.error(f"‚ùå Error enviando informaci√≥n completa para {video['name']}: {e}")
            
            upload_progress.progress((i + 1) / len(selected_videos))
        
        upload_status.text("‚úÖ Informaci√≥n y videos enviados en orden correcto")
        
        # Filtrar videos que son demasiado grandes (igual que Telegram)
        valid_videos = []
        oversized_videos = []
        
        for video in selected_videos:
            if video['size'] > 1500:  # 1.5GB l√≠mite de Telethon
                oversized_videos.append(video)
            else:
                valid_videos.append(video)
        
        if oversized_videos:
            st.warning(f"‚ö†Ô∏è {len(oversized_videos)} videos son demasiado grandes (>1.5GB) y se omitir√°n:")
            for video in oversized_videos:
                st.write(f"  ‚Ä¢ {video['name']} ({video['size']:.2f} MB)")
        
        if not valid_videos:
            st.error("‚ùå No hay videos v√°lidos para subir (todos son demasiado grandes)")
            return
        
        # Configurar callback de progreso (igual que Telegram)
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        def progress_callback(message: str, progress: float):
            progress_bar.progress(progress / 100)
            status_text.text(f"üì§ {message}")
        
        st.info(f"üì§ Subiendo {len(valid_videos)} videos...")
        
        # Usar TelegramUploader (mismo sistema que Telegram)
        results = self.telegram_uploader.upload_multiple_videos(
            videos=valid_videos,
            progress_callback=progress_callback
        )
        
        # Mostrar resultados individuales (igual que Telegram)
        for i, (video, success) in enumerate(zip(valid_videos, results)):
            if success:
                st.success(f"‚úÖ {video['name']} subido correctamente")
            else:
                st.error(f"‚ùå {video['name']} fall√≥")
        
        # Mostrar resumen (igual que Telegram)
        st.markdown("---")
        st.subheader("üìä Resumen de Subida")
        
        total_files = len(valid_videos)
        successful = sum(1 for success in results if success)
        failed = total_files - successful
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("üìÅ Total", total_files)
        with col2:
            st.metric("‚úÖ Exitosos", successful)
        with col3:
            st.metric("‚ùå Fallidos", failed)
        
        if successful > 0:
            st.success(f"üéâ {successful} videos subidos correctamente con informaci√≥n IMDB")
        if failed > 0:
            st.error(f"‚ö†Ô∏è {failed} videos fallaron en la subida")
    
    def _send_poster_to_telegram(self, movie_info: dict, video_name: str):
        """Env√≠a solo la car√°tula a Telegram"""
        try:
            # Limpiar nombre del video para el caption
            clean_video_name = video_name.replace('[', '').replace(']', '').replace('www.', '').replace('.com', '')
            clean_video_name = clean_video_name.replace('DVDrip', '').replace('Spanish', '').replace('  ', ' ').strip()
            
            # Descargar p√≥ster si est√° disponible
            if movie_info.get('poster') and movie_info['poster'] != 'N/A':
                try:
                    # Descargar p√≥ster
                    poster_data = self.imdb_service.manager.movie_finder.get_poster_image(movie_info['poster'])
                    if poster_data:
                        # Guardar p√≥ster temporalmente
                        import tempfile
                        import os
                        temp_dir = tempfile.gettempdir()
                        poster_filename = f"poster_{video_name.replace(' ', '_').replace('.', '_').replace('[', '').replace(']', '')}.jpg"
                        poster_path = os.path.join(temp_dir, poster_filename)
                        
                        with open(poster_path, 'wb') as f:
                            f.write(poster_data)
                        
                        # Crear caption limpio
                        title = movie_info.get('title', clean_video_name)
                        caption = f"üé¨ {title}"
                        
                        # Enviar solo la imagen
                        success = self.telegram_manager.bot_service.send_photo(
                            photo_path=poster_path,
                            caption=caption
                        )
                        
                        # Limpiar archivo temporal
                        if os.path.exists(poster_path):
                            os.remove(poster_path)
                        
                        if success:
                            print(f"‚úÖ Car√°tula enviada para {video_name}")
                        else:
                            print(f"‚ùå Error enviando car√°tula para {video_name}")
                    else:
                        print(f"‚ö†Ô∏è No se pudo descargar car√°tula para {video_name}")
                except Exception as e:
                    print(f"Error con car√°tula de {video_name}: {e}")
            else:
                print(f"‚ö†Ô∏è No hay car√°tula disponible para {video_name}")
            
        except Exception as e:
            print(f"Error enviando car√°tula para {video_name}: {e}")
            raise
    
    def _send_complete_movie_info_to_telegram(self, movie_info: dict, video_name: str, video_path: str):
        """Env√≠a informaci√≥n completa de una pel√≠cula en orden: car√°tula + sinopsis + video"""
        try:
            # 1. Enviar car√°tula
            self._send_poster_to_telegram(movie_info, video_name)
            
            # 2. Enviar sinopsis
            self._send_synopsis_to_telegram(movie_info, video_name)
            
            # 3. Enviar video
            self._send_video_to_telegram(video_path, video_name)
            
            print(f"‚úÖ Informaci√≥n completa enviada para {video_name}")
            
        except Exception as e:
            print(f"Error enviando informaci√≥n completa para {video_name}: {e}")
            raise
    
    def _send_video_to_telegram(self, video_path: str, video_name: str):
        """Env√≠a un video a Telegram"""
        try:
            # Verificar tama√±o del archivo
            file_size = os.path.getsize(video_path)
            size_mb = file_size / (1024 * 1024)
            
            if size_mb > 1500:  # 1.5GB l√≠mite de Telethon
                print(f"‚ö†Ô∏è Video {video_name} es demasiado grande ({size_mb:.2f} MB), omitiendo...")
                return False
            
            # Usar el sistema de Telegram existente
            success = self.telegram_uploader.upload_single_video(
                video_path=video_path,
                video_name=video_name,
                video_title=video_name,
                video_year=None
            )
            
            if success:
                print(f"‚úÖ Video enviado: {video_name}")
            else:
                print(f"‚ùå Error enviando video: {video_name}")
            
            return success
            
        except Exception as e:
            print(f"Error enviando video {video_name}: {e}")
            return False

    def _send_synopsis_to_telegram(self, movie_info: dict, video_name: str):
        """Env√≠a solo la sinopsis a Telegram"""
        try:
            # Limpiar nombre del video
            clean_video_name = video_name.replace('[', '').replace(']', '').replace('www.', '').replace('.com', '')
            clean_video_name = clean_video_name.replace('DVDrip', '').replace('Spanish', '').replace('  ', ' ').strip()
            
            # Crear mensaje con informaci√≥n de la pel√≠cula
            title = movie_info.get('title', clean_video_name)
            year = movie_info.get('year', '')
            rating = movie_info.get('imdb_rating', movie_info.get('rating', ''))
            director = movie_info.get('director', '')
            actors = movie_info.get('actors', '')
            genre = movie_info.get('genre', '')
            plot = movie_info.get('plot', movie_info.get('summary', ''))
            
            # Formatear mensaje
            message = f"üé¨ **{title}**"
            if year:
                message += f" ({year})"
            message += "\n\n"
            
            if rating:
                message += f"‚≠ê **Rating:** {rating}\n"
            if director:
                message += f"üé≠ **Director:** {director}\n"
            if actors:
                message += f"üë• **Actores:** {actors}\n"
            if genre:
                message += f"üé≠ **G√©nero:** {genre}\n"
            
            if plot:
                message += f"\nüìñ **Sinopsis:**\n{plot}\n"
            
            # Enviar mensaje
            success = self.telegram_manager.bot_service.send_message(message)
            
            if success:
                print(f"‚úÖ Sinopsis enviada para {video_name}")
            else:
                print(f"‚ùå Error enviando sinopsis para {video_name}")
            
        except Exception as e:
            print(f"Error enviando sinopsis para {video_name}: {e}")
            raise
    
    def _clean_filename_for_search(self, filename: str) -> str:
        """Limpia el nombre del archivo para b√∫squeda en IMDB"""
        import re
        
        # Remover extensi√≥n
        name = os.path.splitext(filename)[0]
        
        # Remover patrones comunes de torrents
        patterns_to_remove = [
            r'\[DVDrip\]', r'\[BRrip\]', r'\[HDrip\]', r'\[BluRay\]', r'\[WEB-DL\]',
            r'\[Spanish\]', r'\[English\]', r'\[Subs\]', r'\[Sub\]',
            r'\[www\..*?\.com\]', r'\[.*?\.com\]',
            r'\[.*?\]',  # Cualquier cosa entre corchetes
            r'\(.*?\)',  # Cualquier cosa entre par√©ntesis
            r'\d{4}p',   # Resoluciones como 1080p, 720p
            r'x\d{3,4}', # Resoluciones como x264, x265
            r'\.\w{2,4}$' # Extensiones
        ]
        
        for pattern in patterns_to_remove:
            name = re.sub(pattern, '', name, flags=re.IGNORECASE)
        
        # Limpiar espacios y caracteres especiales
        name = re.sub(r'\s+', ' ', name)  # M√∫ltiples espacios a uno
        name = name.strip()
        
        return name
    
    def _search_in_tmdb(self, title: str, year: str = None):
        """Busca informaci√≥n completa en TMDB API con soporte para espa√±ol"""
        try:
            import requests
            from src.settings.settings import settings
            
            # Obtener API key de TMDB
            tmdb_api_key = settings.get_tmdb_api_key()
            if not tmdb_api_key or tmdb_api_key == 'tu_tmdb_api_key':
                print("‚ö†Ô∏è TMDB API key no configurada")
                return None
            
            # 1. Buscar pel√≠cula
            search_url = "https://api.themoviedb.org/3/search/movie"
            search_params = {
                'api_key': tmdb_api_key,
                'query': title,
                'language': 'es-ES',  # Espa√±ol
                'include_adult': 'false'
            }
            if year and year != 'N/A':
                search_params['year'] = year
            
            print(f"üîç TMDB Search URL: {search_url}")
            print(f"üîç TMDB Search Params: {search_params}")
            
            response = requests.get(search_url, params=search_params, timeout=10)
            print(f"üîç TMDB Search Response Status: {response.status_code}")
            
            if response.status_code == 200:
                search_data = response.json()
                print(f"üîç TMDB Search Results: {len(search_data.get('results', []))} encontrados")
                
                if search_data.get('results'):
                    # Tomar el primer resultado
                    movie = search_data['results'][0]
                    movie_id = movie['id']
                    
                    # 2. Obtener detalles completos
                    details_url = f"https://api.themoviedb.org/3/movie/{movie_id}"
                    details_params = {
                        'api_key': tmdb_api_key,
                        'language': 'es-ES'  # Espa√±ol
                    }
                    
                    details_response = requests.get(details_url, params=details_params, timeout=10)
                    print(f"üîç TMDB Details Response Status: {details_response.status_code}")
                    
                    if details_response.status_code == 200:
                        details = details_response.json()
                        print(f"üîç TMDB Details: {details.get('title', 'N/A')} ({details.get('release_date', 'N/A')})")
                        
                        # 3. Obtener p√≥ster
                        poster_url = None
                        if details.get('poster_path'):
                            poster_url = f"https://image.tmdb.org/t/p/w500{details['poster_path']}"
                        
                        return {
                            'title': details.get('title', title),
                            'year': details.get('release_date', '').split('-')[0] if details.get('release_date') else year,
                            'plot': details.get('overview', ''),
                            'summary': details.get('overview', ''),
                            'rating': str(details.get('vote_average', '')),
                            'imdb_rating': str(details.get('vote_average', '')),
                            'director': 'N/A',  # TMDB no incluye director en detalles b√°sicos
                            'actors': 'N/A',   # TMDB no incluye actores en detalles b√°sicos
                            'genre': ', '.join([g['name'] for g in details.get('genres', [])]),
                            'poster': poster_url or 'N/A',
                            'source': 'tmdb'
                        }
                    else:
                        print(f"‚ùå TMDB Details Error: {details_response.status_code}")
                else:
                    print(f"‚ùå TMDB no encontr√≥ resultados para: {title}")
            else:
                print(f"‚ùå TMDB Search Error: {response.status_code}")
            
            return None
            
        except Exception as e:
            print(f"Error buscando en TMDB para {title}: {e}")
            return None

    def _search_in_omdb(self, title: str, year: str = None):
        """Busca informaci√≥n completa en OMDb API"""
        try:
            import requests
            from src.settings.settings import settings
            
            # Obtener API key de OMDb
            omdb_api_key = settings.get_omdb_api_key()
            if not omdb_api_key or omdb_api_key == 'tu_omdb_api_key':
                print("‚ö†Ô∏è OMDb API key no configurada")
                return None
            
            # Construir URL de b√∫squeda
            url = f"http://www.omdbapi.com/?apikey={omdb_api_key}&t={title}"
            if year and year != 'N/A':
                url += f"&y={year}"
            url += "&plot=full"  # Sinopsis completa
            
            print(f"üîç OMDb URL: {url}")
            
            # Realizar petici√≥n
            response = requests.get(url, timeout=10)
            print(f"üîç OMDb Response Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print(f"üîç OMDb Response Data: {data}")
                
                if data.get('Response') == 'True':
                    result = {
                        'title': data.get('Title', title),
                        'year': data.get('Year', year),
                        'plot': data.get('Plot', ''),
                        'summary': data.get('Plot', ''),
                        'rating': data.get('imdbRating', ''),
                        'imdb_rating': data.get('imdbRating', ''),
                        'director': data.get('Director', ''),
                        'actors': data.get('Actors', ''),
                        'genre': data.get('Genre', ''),
                        'poster': data.get('Poster', 'N/A'),
                        'source': 'omdb'
                    }
                    print(f"‚úÖ OMDb encontrado: {result['title']} ({result['year']})")
                    return result
                else:
                    print(f"‚ùå OMDb no encontr√≥: {data.get('Error', 'Unknown error')}")
            else:
                print(f"‚ùå OMDb HTTP Error: {response.status_code}")
            
            return None
            
        except Exception as e:
            print(f"Error buscando en OMDb para {title}: {e}")
            return None

    def _search_in_plex_with_extractor(self, filename: str):
        """Busca en Plex usando el PlexTitleExtractor (m√©todo que funciona)"""
        try:
            from src.settings.settings import settings
            from src.services.Plex.plex_title_extractor import PlexTitleExtractor
            
            plex_db_path = settings.get_plex_database_path()
            if not plex_db_path or not os.path.exists(plex_db_path):
                return None
            
            # Usar el extractor que funciona
            extractor = PlexTitleExtractor(plex_db_path)
            result = extractor.get_real_title_by_filename(filename)
            
            if result:
                return {
                    'title': result.get('title'),
                    'year': result.get('year'),
                    'source': 'plex',
                    'plot': '',  # Plex no siempre tiene sinopsis
                    'summary': '',
                    'poster': 'N/A'  # Plex no tiene p√≥ster directo
                }
            
            return None
            
        except Exception as e:
            print(f"Error buscando en Plex para {filename}: {e}")
            return None

    def _search_in_plex_direct(self, filename: str):
        """Busca informaci√≥n directamente en la base de datos de Plex"""
        try:
            from src.settings.settings import settings
            import sqlite3
            import os
            
            plex_db_path = settings.get_plex_database_path()
            if not plex_db_path or not os.path.exists(plex_db_path):
                return None
            
            # Conectar a la base de datos de Plex (solo lectura)
            conn = sqlite3.connect(f"file:{plex_db_path}?mode=ro", uri=True)
            cur = conn.cursor()
            
            # Buscar por nombre de archivo en media_parts
            sql = """
            SELECT 
                mi.title,
                mi.year,
                mi.summary,
                mi.rating,
                mi.duration,
                mi.studio,
                ls.name as library_name,
                mp.file
            FROM media_items mi
            JOIN library_sections ls ON mi.library_section_id = ls.id
            JOIN media_parts mp ON mi.id = mp.media_item_id
            WHERE mp.file LIKE ? AND ls.section_type = 1
            ORDER BY mi.title
            """
            
            # Buscar con diferentes patrones
            search_patterns = [
                f"%{filename}%",
                f"%{os.path.splitext(filename)[0]}%",
                f"%{filename.replace(' ', '%')}%"
            ]
            
            for pattern in search_patterns:
                cur.execute(sql, (pattern,))
                result = cur.fetchone()
                if result:
                    conn.close()
                    return {
                        'title': result[0],
                        'year': result[1],
                        'summary': result[2],
                        'rating': result[3],
                        'duration': result[4],
                        'studio': result[5],
                        'library_name': result[6],
                        'file_path': result[7],
                        'source': 'plex',
                        'plot': result[2]  # Usar summary como plot
                    }
            
            conn.close()
            return None
            
        except Exception as e:
            print(f"Error buscando en Plex para {filename}: {e}")
            return None
